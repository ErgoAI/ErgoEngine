#include "standard.h"

?- Method[mustDefine(off, ?[pp->?]@ \@)]@\sys.
?- Method[mustDefine(off, ?[ee(?,?)->?]@ \@)]@\sys.

aa[bb->h(x)].
p(f(c,1,g(x)),aa).

%rtps(?Str,?Status) :-
	flora_read_parse_compile_build_term(atom(?Str)@\plg,?,?,?Status)@\plg(flrutils).

%tst1 :-
	write('test1: ')@\plg,
	%rtps('${\\naf exist(?_x,?_y)^p(f(?_c),aa[bb->h(?_y)])}.',?Err),
	writeln(?Err)@\plg.
%tst2 :-
	write('test2: ')@\plg,
	%rtps('${\\naf exist(?_x,?_y)^p(f(?_c),h(?_y))}.',?Err),
	writeln(?Err)@\plg.
%tst3 :-
	write('test3: ')@\plg,
	%rtps('${\\naf exist(?_x,?_y)^p(?_c,?_y)}.',?Err),
        writeln(?Err)@\plg.

%tst4 :-
	write('test4: ')@\plg,
	\if \naf exist(?_x,?_y,?_c)^(p(f(?_c,?,g(?_x)),aa),aa[bb->h(?_y)])
        \then writeln(failed)@\plg
        \else writeln(succeeded)@\plg.
%tst5 :-
	write('test5: ')@\plg,
	\naf exist(?_x,?_y)^ (aa[bb->h(?_y)],(p.pp)(f(?_c.cc,g(?_x)),aa)),
        writeln(succeeded)@\plg.
%tst6 :-
	write('test6: ')@\plg,
	\naf exist(?_x,?_y)^(p(f(?_c,g(?_x)),a),aa[bb[eeee(?_x)->?_y]->h(?_y,?_d)]),
        writeln(succeeded)@\plg.

%tst7 :-
	write('test7: ')@\plg,
	aa[bb[\+ exist(?_y,?_x)^ee(?_x,ggg(?_y))->ff(?_y,?_x)]->h(?_y)],
        writeln(succeeded)@\plg.
%tst8 :-
	write('test8: ')@\plg,
	\if aa[\naf exist(?_x,?_y)^(bb[\+ exist(?_y,?_z)^ee(?_x,ggg(?_y))->ff(?_y,?_z)]->h(?_y))]
        \then writeln(failed)@\plg
        \else writeln(succeeded)@\plg.

%pretest :- %tst1, %tst2, %tst3, %tst4, %tst5, %tst6, %tst7, %tst8.

%test :- tell(temp)@\plg(),
	flora_set_maxerrors(30)@\plg(flrutils),
	file_reopen('/dev/null',w,STDERR,?_)@\plg(file_io),
	Method[mustDefine(on)]@\sys,
	%pretest,
	Method[mustDefine(off)]@\sys,
	//\abolishtables,
	%pretest,
	file_close(STDERR)@\plg(file_io),
	told@\plg.
