
++Error[Flora-2]> [compile_control.flr] <Composer> near line(98)/char(23) `1'
                unexpected operand:
		',', '.', or some other operator may be missing just before the indicated location
++Error[Flora-2]> [compile_control.flr] <Parser> near line(10)/char(3) `:'
                embedded operators : and :: in rule heads are permitted in expert mode only
++Error[Flora-2]> [compile_control.flr] <Parser> near line(15)/char(69) `\then'
                unexpected then-statement
++Error[Flora-2]> [compile_control.flr] <Parser> near line(16)/char(23) `\then'
                unexpected then-statement
++Error[Flora-2]> [compile_control.flr] <Parser> near line(17)/char(15) `\then'
                invalid then-statement
++Error[Flora-2]> [compile_control.flr] <Parser> near line(18)/char(10) `\then'
                invalid then-statement
++Error[Flora-2]> [compile_control.flr] <Parser> near line(21)/char(14) `\if'
                insertion into built-in predicates or attributes is illegal
++Error[Flora-2]> [compile_control.flr] <Parser> near line(29)/char(1) `\do'
                redefinition of a built-in in rule head
++Error[Flora-2]> [compile_control.flr] <Parser> near line(30)/char(1) `\until'
                redefinition of a built-in in rule head
++Error[Flora-2]> [compile_control.flr] <Parser> near line(31)/char(1) `\loop'
                redefinition of a built-in in rule head
++Error[Flora-2]> [compile_control.flr] <Parser> near line(32)/char(1) `\while'
                redefinition of a built-in in rule head
++Error[Flora-2]> [compile_control.flr] <Parser> near line(33)/char(1) `\loop'
                redefinition of a built-in in rule head
++Error[Flora-2]> [compile_control.flr] <Parser> near line(34)/char(1) `\unless'
                redefinition of a built-in in rule head
++Error[Flora-2]> [compile_control.flr] <Parser> near line(36)/char(11) `\neg'
                only conjunctions of literals are allowed in rule heads & facts:
		\or, ==>, and even more general forms are supported
		by the Ergo reasoner
++Error[Flora-2]> [compile_control.flr] <Parser> near line(40)/char(25) `['
                truth-valued path expressions (e.g., pathexp[...]) are not allowed here
++Error[Flora-2]> [compile_control.flr] <Parser> near line(48)/char(6) `['
                truth-valued path expressions (e.g., pathexp[...]) are not allowed here
++Error[Flora-2]> [compile_control.flr] <Parser> near line(50)/char(9) `['
                truth-valued path expressions (e.g., pathexp[...]) are not allowed here
++Error[Flora-2]> [compile_control.flr] <Parser> near line(52)/char(12) `['
                truth-valued path expressions (e.g., pathexp[...]) are not allowed here
++Error[Flora-2]> [compile_control.flr] <Parser> near line(53)/char(11) `['
                truth-valued path expressions (e.g., pathexp[...]) are not allowed here
++Error[Flora-2]> [compile_control.flr] <Parser> near line(55)/char(10) `['
                truth-valued path expressions (e.g., pathexp[...]) are not allowed here
++Error[Flora-2]> [compile_control.flr] <Parser> near line(56)/char(7) `['
                truth-valued path expressions (e.g., pathexp[...]) are not allowed here
++Error[Flora-2]> [compile_control.flr] <Parser> near line(62)/char(17) `['
                truth-valued path expressions (e.g., pathexp[...]) are not allowed here
++Error[Flora-2]> [compile_control.flr] <Parser> near line(63)/char(17) `.'
                no path expressions are allowed in insert{...} & delete{...}
++Error[Flora-2]> [compile_control.flr] <Parser> near line(64)/char(17) `.'
                no path expressions are allowed in insert{...} & delete{...}
++Error[Flora-2]> [compile_control.flr] <Parser> near line(65)/char(15) `.'
                no path expressions are allowed in insert{...} & delete{...}
++Error[Flora-2]> [compile_control.flr] <Parser> near line(68)/char(9) `?bb'
                invalid construct in a predicate/molecule in rule head
++Error[Flora-2]> [compile_control.flr] <Parser> near line(69)/char(9) `?bb'
                invalid construct in a predicate/molecule in rule head
++Error[Flora-2]> [compile_control.flr] <Parser> near line(72)/char(9) `%"abc"'
                unexpected transactional symbol
++Error[Flora-2]> [compile_control.flr] <Parser> near line(73)/char(9) `%"abc"'
                unexpected transactional symbol
++Error[Flora-2]> [compile_control.flr] <Parser> near line(74)/char(6) `%"abc"'
                unexpected transactional symbol
++Error[Flora-2]> [compile_control.flr] <Parser> near line(75)/char(6) `%"abc"'
                unexpected transactional symbol
++Error[Flora-2]> [compile_control.flr] <Parser> near line(76)/char(16) `%"abc"'
                unexpected transactional symbol
++Error[Flora-2]> [compile_control.flr] <Parser> near line(77)/char(16) `%"abc"'
                unexpected transactional symbol
++Error[Flora-2]> [compile_control.flr] <Parser> near line(101)/char(7) `^^'
                invalid construct in a predicate/molecule in rule/query body
++Error[Flora-2]> [compile_control.flr] <Parser> near line(102)/char(9) `^^'
                invalid construct in a predicate/molecule in rule/query body
++Error[Flora-2]> [compile_control.flr] <Parser> near line(103)/char(4) `^^'
                invalid construct in a predicate/molecule in rule head
++Error[Flora-2]> [compile_control.flr] <Parser> near line(104)/char(6) `^^'
                invalid construct in a predicate/molecule in rule head

++37 errors

++compilation aborted


++Error[Flora-2]> [compile_control2.flr] <Compiler> near line(4)/char(28) `='
                illegal use of explicit negation (NEG) in rule body

++Error[Flora-2]> [compile_control2.flr] <Compiler> near line(6)/char(30) `?k'
                aggregate variable not in aggregate body


++2 errors

++compilation aborted


++Warning[Flora-2]> [compile_control.flr] <Compiler> near line(8)/char(11) `?Begin'
                  singleton variable: use ?_Var instead of ?Var, if not an error

++Warning[Flora-2]> [compile_control.flr] <Compiler> near line(8)/char(23) `?End'
                  singleton variable: use ?_Var instead of ?Var, if not an error

++Warning[Flora-2]> [compile_control.flr] <Compiler> near line(7)/char(10) `?L'
                  singleton variable: use ?_Var instead of ?Var, if not an error

++Warning[Flora-2]> [compile_control.flr] <Compiler> near line(7)/char(18) `?Len'
                  singleton variable: use ?_Var instead of ?Var, if not an error

++Warning[Flora-2]> [compile_control.flr] <Compiler> near line(7)/char(32) `?Lx'
                  singleton variable: use ?_Var instead of ?Var, if not an error

++Warning[Flora-2]> [compile_control.flr] <Compiler> near line(7)/char(13) `?Off'
                  singleton variable: use ?_Var instead of ?Var, if not an error

++Warning[Flora-2]> [compile_control.flr] <Compiler> near line(7)/char(10) `?L'
                  unsafe variable in rule head (does not occur in rule body): use ?_Var, if not an error

++Warning[Flora-2]> [compile_control.flr] <Compiler> near line(7)/char(18) `?Len'
                  unsafe variable in rule head (does not occur in rule body): use ?_Var, if not an error

++Warning[Flora-2]> [compile_control.flr] <Compiler> near line(7)/char(32) `?Lx'
                  unsafe variable in rule head (does not occur in rule body): use ?_Var, if not an error

++Warning[Flora-2]> [compile_control.flr] <Compiler> near line(7)/char(13) `?Off'
                  unsafe variable in rule head (does not occur in rule body): use ?_Var, if not an error

++Warning[Flora-2]> [compile_control.flr] <Compiler> near line(9)/char(29) `?L'
                  singleton variable: use ?_Var instead of ?Var, if not an error

++Warning[Flora-2]> [compile_control.flr] <Compiler> near line(9)/char(42) `?L1'
                  singleton variable: use ?_Var instead of ?Var, if not an error

++Warning[Flora-2]> [compile_control.flr] <Compiler> near line(9)/char(2) `?O'
                  singleton variable: use ?_Var instead of ?Var, if not an error

++Warning[Flora-2]> [compile_control.flr] <Compiler> near line(9)/char(2) `?O'
                  unsafe variable in rule head (does not occur in rule body): use ?_Var, if not an error

++Warning[Flora-2]> [compile_control.flr] <Compiler> near line(12)/char(2) `?O'
                  unsafe variable in rule head (does not occur in rule body): use ?_Var, if not an error

++Warning[Flora-2]> [compile_control.flr] <Compiler> near line(20)/char(1) `%p'
                  predicate symbol was also used with a different number of arguments on line 19 in the same file 
		  If this is not an error, use the :- symbol_context directive to suppress this warning

++Warning[Flora-2]> [compile_control.flr] <Compiler> near line(20)/char(8) `a'
                  nontransactional symbol was also used as transactional on line 19 in the same file 
		  If this is not an error, use the :- symbol_context directive to suppress this warning

++Warning[Flora-2]> [compile_control.flr] <Compiler> near line(42)/char(24) `b'
                  nontransactional symbol was also used as transactional on line 19 in the same file 
		  If this is not an error, use the :- symbol_context directive to suppress this warning

++Warning[Flora-2]> [compile_control.flr] <Compiler> near line(42)/char(29) `foo'
                  nontransactional symbol was also used as transactional on line 12 in the same file 
		  If this is not an error, use the :- symbol_context directive to suppress this warning

++Warning[Flora-2]> [compile_control.flr] <Compiler> near line(49)/char(1) `p'
                  nontransactional symbol was also used as transactional on line 20 in the same file 
		  If this is not an error, use the :- symbol_context directive to suppress this warning

++Warning[Flora-2]> [compile_control.flr] <Compiler> near line(61)/char(16) `p'
                  nontransactional symbol was also used as transactional on line 20 in the same file 
		  If this is not an error, use the :- symbol_context directive to suppress this warning

++Warning[Flora-2]> [compile_control.flr] <Compiler> near line(83)/char(3) `a'
                  predicate symbol was also used as a HiLog function symbol on line 20 in the same file 
		  If this is not an error, use the :- symbol_context directive to suppress this warning

++Warning[Flora-2]> [compile_control.flr] <Compiler> near line(83)/char(6) `b'
                  predicate symbol was also used as a HiLog function symbol on line 42 in the same file 
		  If this is not an error, use the :- symbol_context directive to suppress this warning

++Warning[Flora-2]> [compile_control.flr] <Compiler> near line(86)/char(5) `?X'
                  grouping variable found in rule body left of the aggregation
		  where it was declared - a likely mistake: rename or rewrite

++Warning[Flora-2]> [compile_control.flr] <Compiler> near line(87)/char(39) `?O'
                  grouping variable found in rule body left of the aggregation
		  where it was declared - a likely mistake: rename or rewrite

++Warning[Flora-2]> [compile_control.flr] <Compiler> near line(93)/char(5) `?A'
                  singleton variable: use ?_Var instead of ?Var, if not an error

++Warning[Flora-2]> [compile_control.flr] <Compiler> near line(93)/char(36) `?U'
                  singleton variable: use ?_Var instead of ?Var, if not an error

++Warning[Flora-2]> [compile_control.flr] <Compiler> near line(93)/char(53) `?Z'
                  singleton variable: use ?_Var instead of ?Var, if not an error

++Warning[Flora-2]> [compile_control.flr] <Compiler> near line(93)/char(5) `?A'
                  unsafe variable in rule head (does not occur in rule body): use ?_Var, if not an error

++Warning[Flora-2]> [compile_control.flr] <Compiler> near line(93)/char(48) `?O'
                  grouping variable found in rule body left of the aggregation
		  where it was declared - a likely mistake: rename or rewrite

++Warning[Flora-2]> [compile_control.flr] <Compiler> near line(94)/char(5) `?A'
                  singleton variable: use ?_Var instead of ?Var, if not an error

++Warning[Flora-2]> [compile_control.flr] <Compiler> near line(94)/char(57) `?O'
                  singleton variable: use ?_Var instead of ?Var, if not an error

++Warning[Flora-2]> [compile_control.flr] <Compiler> near line(94)/char(45) `?U'
                  singleton variable: use ?_Var instead of ?Var, if not an error

++Warning[Flora-2]> [compile_control.flr] <Compiler> near line(94)/char(62) `?Z'
                  singleton variable: use ?_Var instead of ?Var, if not an error

++Warning[Flora-2]> [compile_control.flr] <Compiler> near line(94)/char(5) `?A'
                  unsafe variable in rule head (does not occur in rule body): use ?_Var, if not an error

++Warning[Flora-2]> [compile_control.flr] <Compiler> near line(94)/char(16) `?X'
                  grouping variable found in rule body left of the aggregation
		  where it was declared - a likely mistake: rename or rewrite


++36 warnings

