
Test1
ErgoText templates in template3:

   Template context:    body
   Template phrase:     ?A is not only a ?F but also a (salaried) ?K 
   Template definition: (?A : ?F, ?A : ?K)
   Template module:     main

   Template context:    head
   Template phrase:     ?A is not only a ?F but also a (salaried) ?K 
   Template definition: (?A : ?F, ?A : ?K)
   Template module:     main

   Template context:    toplevel
   Template phrase:     ?A is not only a ?F but also a (salaried) ?K 
   Template definition: ?A : ?F, ?A : ?K
   Template module:     main

   Template context:    toplevel
   Template phrase:     If ?B has ?D and paid for it then s / he likes it 
   Template definition: ?B[likes->{?D}] :- (?B[has->{?D}], ?B[paidfor->{?D}])
   Template module:     main

   Template context:    body
   Template phrase:     ?A cares for ?D 
   Template definition: ?A[caresfor->{?D}]
   Template module:     main

   Template context:    head
   Template phrase:     ?A cares for ?D 
   Template definition: ?A[caresfor->{?D}]
   Template module:     main

   Template context:    toplevel
   Template phrase:     ?A cares for ?D 
   Template definition: ?A[caresfor->{?D}]
   Template module:     main

   Template context:    body
   Template phrase:     ?A has ?C 
   Template definition: ?A[has->{?C}]
   Template module:     main

   Template context:    head
   Template phrase:     ?A has ?C 
   Template definition: ?A[has->{?C}]
   Template module:     main

   Template context:    toplevel
   Template phrase:     ?A has ?C 
   Template definition: ?A[has->{?C}]
   Template module:     main

   Template context:    toplevel
   Template phrase:     insert rule : if ?F has more than 5 M then he is rich 
   Template definition: ?- insertrule{(?F : rich :- (?F[networth->{?W}], ?W > 5000000))}
   Template module:     main

   Template context:    insert
   Template phrase:     ?A is an ?D 
   Template definition: [?A : ?D]
   Template module:     main

   Template context:    delete
   Template phrase:     ?A is an ?D 
   Template definition: [?A : ?D]
   Template module:     main

   Template context:    body
   Template phrase:     ?A is an ?D 
   Template definition: ?A : ?D
   Template module:     main

   Template context:    head
   Template phrase:     ?A is an ?D 
   Template definition: ?A : ?D
   Template module:     main

   Template context:    toplevel
   Template phrase:     ?A is an ?D 
   Template definition: ?A : ?D
   Template module:     main

   Template context:    dynrule
   Template phrase:     ?A with at least 5 M is rich 
   Template definition: [(?A : rich :- (?A[networth->{?W}], ?W > 5000000))]
   Template module:     main

   Template context:    toplevel
   Template phrase:     Here is a rule with Id = ?I & Tag = ?N : If it rains it pours 
   Template definition: @!{?I[tag->{?_P}]} @{?N} pours(?X) :- rains(?X)
   Template module:     main

   Template context:    body
   Template phrase:     Is ?B true ? 
   Template definition: ?B
   Template module:     main

   Template context:    body
   Template phrase:     ?A greater than ?D 
   Template definition: ?A > ?D
   Template module:     main

   Template context:    head
   Template phrase:     test for symbol context 
   Template definition: p(b)
   Template module:     main

   Template context:    toplevel
   Template phrase:     test for symbol context 
   Template definition: p(b)
   Template module:     main


Test2
Context:    body
Definition: (Tom : Student, Tom : Employee)

Context:    head
Definition: (Tom : Student, Tom : Employee)

Context:    toplevel
Definition: Tom : Student, Tom : Employee

Test3
Context:    toplevel
Definition: ?_someone[likes->{?_something}] :- (?_someone[has->{?_something}], ?_someone[paidfor->{?_something}])

Test4
Context:    body
Definition: ?_X[caresfor->{?_Y}]

Context:    head
Definition: ?_X[caresfor->{?_Y}]

Context:    toplevel
Definition: ?_X[caresfor->{?_Y}]

Test5
Context:    toplevel
Definition: ?- insertrule{(?_X : rich :- (?_X[networth->{?W}], ?W > 5000000))}

Test6
Context:    insert
Definition: Tom : Employee

Context:    delete
Definition: Tom : Employee

Context:    body
Definition: Tom : Employee

Context:    head
Definition: Tom : Employee

Context:    toplevel
Definition: Tom : Employee

Test7
Context:    dynrule
Definition: (?_someone : rich :- (?_someone[networth->{?W}], ?W > 5000000))

Test8
Context:    toplevel
Definition: @!{badweather[tag->{?_P}]} @{high} pours(?X) :- rains(?X)

Test9
Context:    head
Definition: p(b)

Context:    toplevel
Definition: p(b)
test10 = Bob + banana
test11 = John + ok

Test1
ErgoText templates in template3:

   Template context:    body
   Template phrase:     ?A is not only a ?F but also a (salaried) ?K 
   Template definition: (?A : ?F, ?A : ?K)
   Template module:     main

   Template context:    head
   Template phrase:     ?A is not only a ?F but also a (salaried) ?K 
   Template definition: (?A : ?F, ?A : ?K)
   Template module:     main

   Template context:    toplevel
   Template phrase:     ?A is not only a ?F but also a (salaried) ?K 
   Template definition: ?A : ?F, ?A : ?K
   Template module:     main

   Template context:    toplevel
   Template phrase:     If ?B has ?D and paid for it then s / he likes it 
   Template definition: ?B[likes->{?D}] :- (?B[has->{?D}], ?B[paidfor->{?D}])
   Template module:     main

   Template context:    body
   Template phrase:     ?A cares for ?D 
   Template definition: ?A[caresfor->{?D}]
   Template module:     main

   Template context:    head
   Template phrase:     ?A cares for ?D 
   Template definition: ?A[caresfor->{?D}]
   Template module:     main

   Template context:    toplevel
   Template phrase:     ?A cares for ?D 
   Template definition: ?A[caresfor->{?D}]
   Template module:     main

   Template context:    body
   Template phrase:     ?A has ?C 
   Template definition: ?A[has->{?C}]
   Template module:     main

   Template context:    head
   Template phrase:     ?A has ?C 
   Template definition: ?A[has->{?C}]
   Template module:     main

   Template context:    toplevel
   Template phrase:     ?A has ?C 
   Template definition: ?A[has->{?C}]
   Template module:     main

   Template context:    toplevel
   Template phrase:     insert rule : if ?F has more than 5 M then he is rich 
   Template definition: ?- insertrule{(?F : rich :- (?F[networth->{?W}], ?W > 5000000))}
   Template module:     main

   Template context:    insert
   Template phrase:     ?A is an ?D 
   Template definition: [?A : ?D]
   Template module:     main

   Template context:    delete
   Template phrase:     ?A is an ?D 
   Template definition: [?A : ?D]
   Template module:     main

   Template context:    body
   Template phrase:     ?A is an ?D 
   Template definition: ?A : ?D
   Template module:     main

   Template context:    head
   Template phrase:     ?A is an ?D 
   Template definition: ?A : ?D
   Template module:     main

   Template context:    toplevel
   Template phrase:     ?A is an ?D 
   Template definition: ?A : ?D
   Template module:     main

   Template context:    dynrule
   Template phrase:     ?A with at least 5 M is rich 
   Template definition: [(?A : rich :- (?A[networth->{?W}], ?W > 5000000))]
   Template module:     main

   Template context:    toplevel
   Template phrase:     Here is a rule with Id = ?I & Tag = ?N : If it rains it pours 
   Template definition: @!{?I[tag->{?_P}]} @{?N} pours(?X) :- rains(?X)
   Template module:     main

   Template context:    body
   Template phrase:     Is ?B true ? 
   Template definition: ?B
   Template module:     main

   Template context:    body
   Template phrase:     ?A greater than ?D 
   Template definition: ?A > ?D
   Template module:     main

   Template context:    head
   Template phrase:     test for symbol context 
   Template definition: p(b)
   Template module:     main

   Template context:    toplevel
   Template phrase:     test for symbol context 
   Template definition: p(b)
   Template module:     main


Test2
Context:    body
Definition: (Tom : Student, Tom : Employee)

Context:    head
Definition: (Tom : Student, Tom : Employee)

Context:    toplevel
Definition: Tom : Student, Tom : Employee

Test3
Context:    toplevel
Definition: ?_someone[likes->{?_something}] :- (?_someone[has->{?_something}], ?_someone[paidfor->{?_something}])

Test4
Context:    body
Definition: ?_X[caresfor->{?_Y}]

Context:    head
Definition: ?_X[caresfor->{?_Y}]

Context:    toplevel
Definition: ?_X[caresfor->{?_Y}]

Test5
Context:    toplevel
Definition: ?- insertrule{(?_X : rich :- (?_X[networth->{?W}], ?W > 5000000))}

Test6
Context:    insert
Definition: Tom : Employee

Context:    delete
Definition: Tom : Employee

Context:    body
Definition: Tom : Employee

Context:    head
Definition: Tom : Employee

Context:    toplevel
Definition: Tom : Employee

Test7
Context:    dynrule
Definition: (?_someone : rich :- (?_someone[networth->{?W}], ?W > 5000000))

Test8
Context:    toplevel
Definition: @!{badweather[tag->{?_P}]} @{high} pours(?X) :- rains(?X)

Test9
Context:    head
Definition: p(b)

Context:    toplevel
Definition: p(b)
test10 = Bob + banana
test11 = John + ok
Note: if configured with -P, test11 will not be printed
