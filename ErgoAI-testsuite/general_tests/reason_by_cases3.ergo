
:- prolog{get_choice/2,
          get_all_choices/2,  // important
          hypoquery/2,
          disjquery/2}.

?- Method[mustDefine(off,(p(?)@\@,q(?)@\@,r(?)@\@))]@\sys.


d(3) :- p(1) ; p(2) ; p(3).
d(7) :- p(5) ; p(6).
e(4) :- q(1) ; q(2) ; q(3) ; q(4).
f(5) :- r(1) ; r(2) ; r(3) ; r(4).

disj([${p(1)},${p(2)},${p(3)}]).
disj([${p(5)},${p(6)}]).
disj([${r(1)},${r(2)},${r(3)}, ${r(4)}]).
disj([${q(1)},${q(2)},${q(3)},${q(4)},${q(5)}]).
disj([${q(1)},${q(2)},${q(3)}]).

disj_pattern(ppat(1),[${p(1)},${p(2)}|?]).
disj_pattern(qpat(1),[${q(1)},${q(2)},${q(3)}|?]).
disj_pattern(qpat(2),[${q(1)},${q(2)},${q(3)}]).
disj_pattern(rpat,[${r(1)},${r(2)},${r(3)}|?]).

// Note: d(3), d(7), f(5) - true; e(?) - false

/*
**        disjquery(+?Disjunctions,+?Query)
**
** Run ?Query in a compartmentalized way with respect to ?Disjunctions.
** Check if the query is true in the presence of the disjunctive info
** listed in the list ?Disjunctions. ?Disjunctions determines all
** possible worlds in which ?Query must be tested.
** NOT all the disjunctions in that list actually need to be true.
** The false disjunctions (like disj([q(1),q(2)]) in our example) are ignored,
** but can be listed in ?Disjunctions to make the user's life easier.
**
** High-level description: ?Choices is a list of possible worlds.
** We first generate all possible worlds and then test that ?Query is
** true in ALL possible worlds and that the query answers (bindings)
** are the same in each such world.
*/

// Rough first try and inefficient
disjquery(?Disjunctions,?Query) :-
        get_all_choices(?Disjunctions,?Choices),
        hypoquery(?Choices,?Query).


/*
**       hypoquery(+?Choices,+?Query)
**
** Hypothetically insert each choice in ?Choices, creating a possible world
** compatible with each choice. Then test ?Query.
** In other words, a choice is a conjunction of literals where each literal
** is a disjunct in one of the conjunctions (each choice has exactly one
** literal from each disjunction).
** The query must be true with the same bindings in each possible world.
**
** Arbitrary number of disjuncts
*/
hypoquery([],?_Query) :- !.
hypoquery([?Choice|?Rest],?Query) :-
        //flora_generalize_context(?Query,?Query1)@\plg(flrtrim),
        ?Query1 = ?Query,
        <>(tinsert{?Choice},?Query),
        hypoquery(?Rest,?Query1).

// Generate all possible alternative choices for constructing
// hypothetical worlds that are implicit in ?Disjunctions
get_all_choices(?Disjunctions,?Choices) :-
        ?Choices = setof{?Choice|get_choice(?Disjunctions,?Choice)}.

get_choice([],${null}) :- !.
get_choice([?DisjPtrn|?Rest],?Choice) :-
        (disj_pattern(?DisjPtrn,?DisjList) -->> \true
        ; ?DisjList = ?DisjPtrn
        ),
        \if disj(?DisjList) \then (
           ?Out \in ?DisjList,
           ?Choice = (?Out,?RestChoices),
           get_choice(?Rest,?RestChoices)
        ) \else
           get_choice(?Rest,?Choice).


// Tests
// If this will turn out to be useful, a high-level feature could be added to
// the compiler, which will eliminate the need for so many reifications
%tst1 :- 
        disjquery([ppat(?),
                   [${q(1)},${q(2)},${q(3)}|?],    // insufficient disj
                   [${r(1)},${r(2)}|?]],          // this also
                   ${d(?X)}
                   //${true{d(?X)}}
                 ),
        writeln(test1=?X)@\plg.

%tst2 :-  // here we test e(?) with respect to qpat(2), and there it is true
        disjquery([ppat(1),
                   [${p(5)},${p(6)}],
                   qpat(2), rpat],
                  ${d(?X),f(?Y),e(?Z)}
                 ),
        writeln(test2=?X+?Y+?Z)@\plg,
        \false.
%tst2 :- !.

%tst3 :- 
        disjquery([[${p(1)},${p(2)},${p(3)}|?],
                   [${p(5)},${p(6)}],
                   qpat(?), rpat],
                   ${true{d(?X),f(?Y)}}
                 ),
        writeln(test3=?X+?Y)@\plg,
        \false.
%tst3 :- !.

%tst4 :- // false because e(?) is true in some possible states and not others
        //disjquery([[${p(1)},${p(2)},${p(3)}|?], qpat(?), rpat],
        disjquery([qpat(1)], ${false{\naf e(?)}} ),
        writeln(test4=fail)@\plg,
        !.
%tst4 :- writeln(test4=ok)@\plg.

%tst5 :- // e(?) is true in states q(1)-q(4) but false in <>(tinsert{q(5)},e(?))
        disjquery([ppat(1), qpat(1), rpat], ${e(?)} ),
        writeln(test2=fail)@\plg.
%tst5 :-  writeln(test5=ok)@\plg.

%tst6 :- // false because e(?) is true in some possible states and not others
        disjquery([[${p(1)},${p(2)},${p(3)}|?], qpat(1), rpat],
                   ${e(?)}
                 ),
        writeln(test6=fail)@\plg,
        !.
%tst6 :- writeln(test6=ok)@\plg.


%pretest :- %tst1, %tst2, %tst3, %tst4, %tst5, %tst6.

%test :- tell(temp)@\plg(),
	Method[mustDefine(on)]@\sys,
	%pretest,
	Method[mustDefine(off)]@\sys,
	!,
	%pretest,
	told@\plg().

