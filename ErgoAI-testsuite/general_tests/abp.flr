:- ignore_depchk{%losemsg(?), %loseack(?)}.

0:stage1. // Initial state
abp:ea.

emptysmsg[bit->u, data->u].
emptyamsg[bit->u].

:- setsemantics{equality=flogic}.

int(1).
int(?N) :- 
	int(?M), ?M < 10, ?N \is ?M + 1.

sfile[?N->?N] :- int(?N).

abp.0[sbit->null].
abp.0[rbit->null].
abp.0[sno->1].
abp.0[rno->1].
abp.0[sendmsg->emptysmsg].
abp.0[ackmsg->emptyamsg].
abp.0[retries->0].

null[flip->eins].
eins[flip->null].
%losemsg(1).
%losemsg(2).
%losemsg(3).
%losemsg(4).
%losemsg(5).

%loseack(8).
%loseack(9).
%loseack(10).
%loseack(11).
%loseack(12).
%loseack(13).

%losemsg(16).
%losemsg(17).
%losemsg(18).
%losemsg(19).
%losemsg(20).


/* RULES */

?X.?T[?Y->?Z] :- ?T:stage1, ?S \is ?T - 1, ?X:ea.?S[?Y->?Z], \naf ?X.?T.?Y[].

?X.?T[?Y(?T1)->?Z] :-  ?T:stage1, ?S \is ?T - 1, ?X:ea.?S[?Y(?T1)->?Z], \naf ?X.?T.?Y(?T1)[].

abp.?T[sendmsg->smsg.?T[bit->?B, data->?D], retries->?RR] :-
	?S.propagatevalues[], ?T \is ?S + 1, // \naf T.applyrules[],
	abp.?S[sendmsg->emptysmsg,
	      ackmsg->emptyamsg,
	      sbit->?B,
	      sno->?N,
	      retries->?R],
       sfile[?N->?D], ?RR \is  ?R + 1.

abp.?T[sendmsg->smsg.?T[bit->?C, data->?D], 
      sno->?M, 
      sbit->?C, 
      ackmsg->emptyamsg, 
      retries->0]
    :- ?S.propagatevalues[], ?T  \is ?S + 1, // \naf T.applyrules[],
       abp.?S[ackmsg->?_AMSG[bit->?B], 
             sbit->?B, 
             sendmsg->emptysmsg, 
             sno->?N],
       \+ %loseack(?S),
       sfile[?M->?D], ?B[flip->?C], ?M  \is  ?N + 1.

abp.?T[ackmsg->emptyamsg,  sno->?M]
    :- ?S.propagatevalues[], ?T \is ?S + 1, // \naf T.applyrules[],
       abp.?S[ackmsg->?_AMSG[bit->?B], 
             sbit->?B, 
             sendmsg->emptysmsg, 
             sno->?N],
       \+ %loseack(?S),
       ?M  \is  ?N+1,
       \naf sfile.?M[].

abp.?T[ackmsg->amsg.?T[bit->?B], rno->?M, rfile(?_N)->?D, rbit->?C, sendmsg->emptysmsg], ?S[x->{b}]
    :- ?S.propagatevalues[], ?T \is ?S + 1, // \naf T.applyrules[],
       abp.?S[sendmsg->?_SMSG[bit->?B, data->?D], 
             rbit->?B, 
             rno->?_N, 
             ackmsg->emptyamsg],
       \+ %losemsg(?S),
       ?B[flip->?C], ?M  \is  ?_N + 1.

abp.?T[ackmsg->amsg.?T[bit->?B], sendmsg->emptysmsg], ?S[x->{a}] :-
	?S.propagatevalues[], ?T \is ?S + 1, // \naf T.applyrules[],
        abp.?S[sendmsg->?_SMSG[bit->?B, data->?_D], 
              rbit->?C, 
	      rno->?_N, 
	      ackmsg->emptyamsg],
       \+ %losemsg(?S),
       ?C[flip->?B].

abp.?T[sendmsg->emptysmsg]
    :- ?S.propagatevalues[], ?T \is ?S + 1, // \naf T.applyrules[],
       %losemsg(?S),
       \naf abp.?S[sendmsg->emptysmsg].

abp.?T[ackmsg->emptyamsg]
    :- ?S.propagatevalues[], ?T \is ?S + 1, // \naf T.applyrules[],
       %loseack(?S),
       \naf abp.?S[sendmsg->emptysmsg].


0.running[].
?T.running[]:- ?T.applyrules[],
    	      //\naf T:complete,
	      ?X:ea, ?S \is ?T - 1, ?S:state,
               ?X.?T[?Y->?Z], \naf ?X.?S[?Y->?Z].


?T.running[]:- ?T.applyrules[],
    	    	//\naf T:complete,
		?X:ea, ?S \is ?T - 1, ?S:state,
               ?X.?T[?Y(?T1)->?Z], \naf ?X.?S[?Y(?T1)->?Z].

stage1::state[|propagatevalues -> true|].
stage2::state[|applyrules -> true|].
?S:stage2 :- ?S.propagatevalues[].
?T:stage1 :- ?S.applyrules[], ?S.running[], ?T \is  ?S + 1.
//S:complete :- S.applyrules[].


/* QUERY */
%tst1 :-abp.?S[sendmsg->?Smsg[bit->?B, data->?D]],
	write(?S)@\io, write('  ')@\io, write(?Smsg)@\io,
	write('  ')@\io, write(?B)@\io,
	write('  ')@\io, writeln(?D)@\io,
	\false.
%tst1 :- \true.
%tst2 :-abp.?S[ackmsg->?Smsg[bit->?B]], 
	write(?S)@\io, write('  ')@\io, write(?Smsg)@\io,
	write('  ')@\io, writeln(?B)@\io, \false.
%tst2 :- \true.
%tst3 :-abp.?S[rfile(?N)->?D], \naf ?S.running[],
	write(?S)@\io, write('  ')@\io, write(?N)@\io,
	write('  ')@\io, writeln(?D)@\io,
	\false.
%tst3 :- \true.

%test :- %tst1, %tst2, %tst3.
// %test :- tell(temp)@\plg(), %tst1, %tst2, %tst3, told@\plg().




