
#include "standard.h"

p :- \true.
q :- \true.
?- insert{r(?_X) :- forbidden(?_X)}.
s(?X) :- forbidden2(?X).

?-  writeln(STDWARN,'\n## adding constr1')@\plg,
        feedback{tempoff},
        +constraint{p}.
?-  writeln(STDWARN,'## adding constr2')@\plg,
        feedback{tempoff},
        +constraint{(q)}.
?-  writeln(STDWARN,'## adding constr3+4 - no warnings, as they are not violated\n')@\plg,
        feedback{tempoff},
        +constraint{r(?)},
        +constraint{s(?)}.

?-  writeln(STDWARN,'## inserting forbidden(1) NON-transactionally: should trigger 3 warnings')@\plg,
        feedback{tempoff},
        insert{forbidden({1,a})}.

?-  writeln(STDWARN,'## inserting forbidden2(aaa) TRANSACTIONALLY: should trigger 4 warnings, but change should roll back')@\plg,
        // we want to make this roll back because of the violations
        feedback{tempoff},
        tinsert{forbidden2(aaa)},
        tinsert{forbidden2(bbb)}.

callback_s(?C,?F) :- writeln(STDWARN,'callback from s(?):' = ?F+?C)@\io.
callback_p(?C,?F,?M) :- writeln(STDWARN,'callback from p:' = ?F+?M+?C)@\io.

%tst1  :- forbidden(?X), writeln(test1 = ?X)@\plg, \false.
%tst1 :- \true.
%tst2  :- \naf forbidden2(?), writeln(test2 = ok)@\plg.
%tst3  :- writeln(STDWARN,'## test 3: r(?), p, q are still violated.')@\plg,
          -constraint{s(?)}, tinsert{forbidden2(ccc)}, writeln(test3=ok)@\plg.
%tst4  :- forbidden2(?X), writeln(test4=?X)@\plg.
%tst5  :- writeln(STDWARN,'## test 5: constr p, q are still violated.')@\plg,
          deleteall{forbidden(?_X)}, writeln(test5=ok)@\plg.
%tst6  :- writeln(STDWARN,'## test 6: constr r(?) becomes violated')@\plg,
          -constraint{p}, -constraint{q},
          insert{forbidden(222)},
          insert{forbidden2(eee)},
          tinsert{forbidden2(ddd)},
          writeln(test6=ok)@\plg.
// tinsert{forbidden2(ddd)} is transactional, so it should not stay in the
// DB due to constraint violation
%tst7  :- writeln(STDWARN,'\n## executing test 7 (together with test6: test6 violations appear after this)')@\plg,
          forbidden(?X), ?L = setof{?Y|forbidden2(?Y)},
          writeln(test7=?X+?L)@\plg.
%tst8  :-  writeln(STDWARN,'\n## executing test 8')@\plg,
          insert{forbidden2({111,222})}, writeln(test8=ok)@\plg.
%tst9  :-  writeln(STDWARN,'\n## executing test 9')@\plg,
          tinsert{forbidden2(333)}, writeln(test9=ok)@\plg.
// tst9 - insertion is transactional, so 333 should not stay in the DB
// due to constraint violation
%tst10 :-  writeln(STDWARN,'\n## executing test 10')@\plg,
          \+forbidden2(333), forbidden2(222), writeln(test10=ok)@\plg.

// These must run as separate queries so that constraint checker will kick in
// after each query.
?- %tst1, %tst2, %tst3, !, %tst4.
?- %tst5.
?- %tst6, %tst7.
?- writeln(STDWARN,'\n## Adding constraints that have callbacks:')@\plg,
   +constraint{s(?),callback_s(?,\@F)}, +constraint{p,callback_p(?,\@F,\@)}.
?- %tst8.
?- -constraint{p}.
?- %tst9.
?- %tst10.
