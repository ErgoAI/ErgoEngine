test1 = explanation(true(${john:human@main},it is a top query,ruleid(null,null,main)),[explanation(true(${john:person@main},null,ruleid(null,null,main)),[explanation(true(${john:employee@main},it is a base fact,ruleid(null,null,null)),[]), explanation(true(${employee::person@main},it is a base fact,ruleid(null,null,null)),[])]), explanation(true(${person::human@main},it is a base fact,ruleid(null,null,null)),[])])
test2 = explanation(true(${employee::human@main},it is a top query,ruleid(null,null,main)),[explanation(true(${employee::person@main},it is a base fact,ruleid(null,null,null)),[]), explanation(true(${person::human@main},it is a base fact,ruleid(null,null,null)),[])])
test3 = explanation(true((${mary[believes_in->nothing]@main}, ${mary[age->33]@main}),it is a top query,ruleid(null,null,null)),[explanation(true(${mary[age->33]@main},null,ruleid(null,null,main)),[explanation(true(${age:=:seniority@main},null,ruleid(null,null,null)),[]), explanation(true(${mary[seniority->33]@main},it is a base fact,ruleid(null,null,null)),[])]), explanation(true(${mary[believes_in->nothing]@main},it is a base fact,ruleid(null,null,null)),[])])
test4 = explanation(true(${father(mary)[believes_in->salary]@main},it is a top query,ruleid(null,null,main)),[explanation(true(${father(mary)[believes_in->salary]@main},null,ruleid(null,null,null)),[])])
test5 = explanation(true(${john[believes_in->salary]@main},it is a top query,ruleid(null,null,main)),[explanation(true(${john[believes_in->salary]@main},null,ruleid(null,null,null)),[])])
test6 = explanation(true(${bob[believes_in->something]@main},it is a top query,ruleid(null,null,main)),[explanation(true(${bob[believes_in->something]@main},null,ruleid(null,null,null)),[])])
test7 = explanation(true(((${worker[|age=>MyInteger|]@main}, ${worker[|age{1..1}=>?|]@main}), ${worker[|children=>person|]@main}),it is a top query,((worker[|age=>MyInteger|]) and (worker[|age{1..1}=>?|])) and (worker[|children=>person|]),ruleinfo(ruleid(null,null,null),it is a top query)),[explanation(true(${worker[|age=>MyInteger|]@main},null,worker[|age=>MyInteger|],ruleinfo(ruleid(null,null,main),axiom|inheritance of type to subclass)),[explanation(true(${worker::human@main},null,worker::human,ruleinfo(ruleid(null,null,main),axiom|transitivity of subclass relationship)),[explanation(true(${person::human@main},it is a base fact,person::human,ruleinfo(ruleid(null,null,null),this is a base fact or a builtin)),[]), explanation(true(${worker::person@main},null,worker::person,ruleinfo(ruleid(null,null,main),axiom|derived by equality substitution)),[explanation(true(${worker::individual@main},null,worker::individual,ruleinfo(ruleid(null,null,main),axiom|derived by equality substitution)),[explanation(true(${employee::person@main},it is a base fact,employee::person,ruleinfo(ruleid(null,null,null),this is a base fact or a builtin)),[]), explanation(true(${individual:=:person@main},null,individual:=:person,ruleinfo(ruleid(null,null,null),this is a base fact or a builtin)),[]), explanation(true(${worker:=:employee@main},null,worker:=:employee,ruleinfo(ruleid(null,null,null),this is a base fact or a builtin)),[])]), explanation(true(${person:=:individual@main},it is a base fact,person:=:individual,ruleinfo(ruleid(null,null,null),this is a base fact or a builtin)),[])])]), explanation(true(${human[|age=>MyInteger|]@main},it is a base fact,human[|age=>MyInteger|],ruleinfo(ruleid(null,null,null),this is a base fact or a builtin)),[])]), explanation(true(${worker[|children=>person|]@main},null,worker[|children=>person|],ruleinfo(ruleid(null,null,main),axiom|derived by equality substitution)),[explanation(true(${person:=:individual@main},it is a base fact,person:=:individual,ruleinfo(ruleid(null,null,null),this is a base fact or a builtin)),[]), explanation(true(${worker[|children=>individual|]@main},null,worker[|children=>individual|],ruleinfo(ruleid(null,null,null),this is a base fact or a builtin)),[])]), explanation(true(${worker[|age{1..1}=>?|]@main},null,worker[|age{1..1}=>?|],ruleinfo(ruleid(null,null,null),this is a base fact or a builtin)),[])])
test8 = explanation(true(((${john[age=>MyInteger]@main}, ${john[age{1..1}=>?]@main}), ${john[children=>person]@main}),it is a top query,((john[age=>MyInteger]) and (john[age{1..1}=>?])) and (john[children=>person]),ruleinfo(ruleid(null,null,null),it is a top query)),[explanation(true(${john[age=>MyInteger]@main},null,john[age=>MyInteger],ruleinfo(ruleid(null,null,main),axiom|inheritance of type to class member)),[explanation(true(${john:employee@main},it is a base fact,john:employee,ruleinfo(ruleid(null,null,null),this is a base fact or a builtin)),[]), explanation(true(${employee[|age=>MyInteger|]@main},null,employee[|age=>MyInteger|],ruleinfo(ruleid(null,null,main),axiom|inheritance of type to subclass)),[explanation(true(${employee::human@main},null,employee::human,ruleinfo(ruleid(null,null,main),axiom|transitivity of subclass relationship)),[explanation(true(${employee::person@main},it is a base fact,employee::person,ruleinfo(ruleid(null,null,null),this is a base fact or a builtin)),[]), explanation(true(${person::human@main},it is a base fact,person::human,ruleinfo(ruleid(null,null,null),this is a base fact or a builtin)),[])]), explanation(true(${human[|age=>MyInteger|]@main},it is a base fact,human[|age=>MyInteger|],ruleinfo(ruleid(null,null,null),this is a base fact or a builtin)),[])])]), explanation(true(${john[children=>person]@main},null,john[children=>person],ruleinfo(ruleid(null,null,main),axiom|inheritance of type to class member)),[explanation(true(${john:employee@main},it is a base fact,john:employee,ruleinfo(ruleid(null,null,null),this is a base fact or a builtin)),[]), explanation(true(${employee[|children=>person|]@main},null,employee[|children=>person|],ruleinfo(ruleid(null,null,main),axiom|inheritance of type to subclass)),[explanation(true(${employee::person@main},it is a base fact,employee::person,ruleinfo(ruleid(null,null,null),this is a base fact or a builtin)),[]), explanation(true(${person[|children=>person|]@main},null,person[|children=>person|],ruleinfo(ruleid(null,null,main),axiom|derived by equality substitution)),[explanation(true(${person:=:individual@main},it is a base fact,person:=:individual,ruleinfo(ruleid(null,null,null),this is a base fact or a builtin)),[]), explanation(true(${person[|children=>individual|]@main},null,person[|children=>individual|],ruleinfo(ruleid(null,null,main),axiom|inheritance by method specialization)),[explanation(true(method kids is a generalization of children,null,'method kids is a generalization of children',ruleinfo(ruleid(null,null,null),this is a base fact or a builtin)),[]), explanation(true(${person[|kids=>individual|]@main},it is a base fact,person[|kids=>individual|],ruleinfo(ruleid(null,null,null),this is a base fact or a builtin)),[])])])])]), explanation(true(${john[age{1..1}=>?]@main},null,john[age{1..1}=>?],ruleinfo(ruleid(null,null,null),this is a base fact or a builtin)),[])])
test9 = explanation(true(((${father(mary)[age=>MyInteger]@main}, ${father(mary)[age{1..1}=>?]@main}), ${father(mary)[children=>person]@main}),it is a top query,ruleid(null,null,null)),[explanation(true(${father(mary)[age=>MyInteger]@main},null,ruleid(null,null,main)),[explanation(true(${father(mary):human@main},null,ruleid(null,null,main)),[explanation(true(${father(mary):person@main},null,ruleid(null,null,main)),[explanation(true(${father(mary):employee@main},null,ruleid(null,null,main)),[explanation(true(${father(mary):worker@main},null,ruleid(null,null,main)),[explanation(true(${john:employee@main},it is a base fact,ruleid(null,null,null)),[]), explanation(true(${worker:=:employee@main},null,ruleid(null,null,null)),[]), explanation(true(${father(mary):=:john@main},null,ruleid(null,null,null)),[])]), explanation(true(${employee:=:worker@main},it is a base fact,ruleid(null,null,null)),[])]), explanation(true(${employee::person@main},it is a base fact,ruleid(null,null,null)),[])]), explanation(true(${person::human@main},it is a base fact,ruleid(null,null,null)),[])]), explanation(true(${human[|age=>MyInteger|]@main},it is a base fact,ruleid(null,null,null)),[])]), explanation(true(${father(mary)[children=>person]@main},null,ruleid(null,null,main)),[explanation(true(${person:=:individual@main},it is a base fact,ruleid(null,null,null)),[]), explanation(true(${father(mary)[children=>individual]@main},null,ruleid(null,null,null)),[])]), explanation(true(${father(mary)[age{1..1}=>?]@main},null,ruleid(null,null,null)),[])])
test10 = explanation(true(((${worker[|age=>Number|]@main}, ${worker[|age{1..1}=>?|]@main}), ${worker[|kids=>human|]@main}),it is a top query,ruleid(null,null,null)),[explanation(true(${worker[|age=>Number|]@main},null,ruleid(null,null,main)),[explanation(true(${MyInteger::Number@main},it is a base fact,ruleid(null,null,null)),[]), explanation(true(${worker[|age=>MyInteger|]@main},null,ruleid(null,null,main)),[explanation(true(${worker::human@main},null,ruleid(null,null,main)),[explanation(true(${person::human@main},it is a base fact,ruleid(null,null,null)),[]), explanation(true(${worker::person@main},null,ruleid(null,null,main)),[explanation(true(${worker::individual@main},null,ruleid(null,null,main)),[explanation(true(${employee::person@main},it is a base fact,ruleid(null,null,null)),[]), explanation(true(${individual:=:person@main},null,ruleid(null,null,null)),[]), explanation(true(${worker:=:employee@main},null,ruleid(null,null,null)),[])]), explanation(true(${person:=:individual@main},it is a base fact,ruleid(null,null,null)),[])])]), explanation(true(${human[|age=>MyInteger|]@main},it is a base fact,ruleid(null,null,null)),[])])]), explanation(true(${worker[|kids=>human|]@main},null,ruleid(null,null,main)),[explanation(true(${person::human@main},it is a base fact,ruleid(null,null,null)),[]), explanation(true(${worker[|kids=>person|]@main},null,ruleid(null,null,main)),[explanation(true(${person:=:individual@main},it is a base fact,ruleid(null,null,null)),[]), explanation(true(${worker[|kids=>individual|]@main},null,ruleid(null,null,main)),[explanation(true(${worker::person@main},null,ruleid(null,null,main)),[explanation(true(${worker::individual@main},null,ruleid(null,null,main)),[explanation(true(${employee::person@main},it is a base fact,ruleid(null,null,null)),[]), explanation(true(${individual:=:person@main},null,ruleid(null,null,null)),[]), explanation(true(${worker:=:employee@main},null,ruleid(null,null,null)),[])]), explanation(true(${person:=:individual@main},it is a base fact,ruleid(null,null,null)),[])]), explanation(true(${person[|kids=>individual|]@main},it is a base fact,ruleid(null,null,null)),[])])])]), explanation(true(${worker[|age{1..1}=>?|]@main},null,ruleid(null,null,null)),[])])
test11 = explanation(true(((${father(mary)[age=>Number]@main}, ${father(mary)[age{1..1}=>?]@main}), ${father(mary)[children=>human]@main}),it is a top query,ruleid(null,null,null)),[explanation(true(${father(mary)[age=>Number]@main},null,ruleid(null,null,main)),[explanation(true(${MyInteger::Number@main},it is a base fact,ruleid(null,null,null)),[]), explanation(true(${father(mary)[age=>MyInteger]@main},null,ruleid(null,null,main)),[explanation(true(${father(mary):human@main},null,ruleid(null,null,main)),[explanation(true(${father(mary):person@main},null,ruleid(null,null,main)),[explanation(true(${father(mary):employee@main},null,ruleid(null,null,main)),[explanation(true(${father(mary):worker@main},null,ruleid(null,null,main)),[explanation(true(${john:employee@main},it is a base fact,ruleid(null,null,null)),[]), explanation(true(${worker:=:employee@main},null,ruleid(null,null,null)),[]), explanation(true(${father(mary):=:john@main},null,ruleid(null,null,null)),[])]), explanation(true(${employee:=:worker@main},it is a base fact,ruleid(null,null,null)),[])]), explanation(true(${employee::person@main},it is a base fact,ruleid(null,null,null)),[])]), explanation(true(${person::human@main},it is a base fact,ruleid(null,null,null)),[])]), explanation(true(${human[|age=>MyInteger|]@main},it is a base fact,ruleid(null,null,null)),[])])]), explanation(true(${father(mary)[children=>human]@main},null,ruleid(null,null,main)),[explanation(true(${person::human@main},it is a base fact,ruleid(null,null,null)),[]), explanation(true(${father(mary)[children=>person]@main},null,ruleid(null,null,main)),[explanation(true(${person:=:individual@main},it is a base fact,ruleid(null,null,null)),[]), explanation(true(${father(mary)[children=>individual]@main},null,ruleid(null,null,null)),[])])]), explanation(true(${father(mary)[age{1..1}=>?]@main},null,ruleid(null,null,null)),[])])
test12 = explanation(true((${john[salary(leapyear)=>Number]@main}, ${john[kids=>individual]@main}),it is a top query,ruleid(null,null,null)),[explanation(true(${john[kids=>individual]@main},null,ruleid(null,null,main)),[explanation(true(${john:person@main},null,ruleid(null,null,main)),[explanation(true(${john:employee@main},it is a base fact,ruleid(null,null,null)),[]), explanation(true(${employee::person@main},it is a base fact,ruleid(null,null,null)),[])]), explanation(true(${person[|kids=>individual|]@main},it is a base fact,ruleid(null,null,null)),[])]), explanation(true(${john[salary(leapyear)=>Number]@main},null,ruleid(null,null,main)),[explanation(true(${john:employee@main},it is a base fact,ruleid(null,null,null)),[]), explanation(true(${employee[|salary(leapyear)=>Number|]@main},null,ruleid(null,null,main)),[explanation(true(${MyInteger::Number@main},it is a base fact,ruleid(null,null,null)),[]), explanation(true(${employee[|salary(leapyear)=>MyInteger|]@main},null,ruleid(null,null,main)),[explanation(true(${employee:=:worker@main},it is a base fact,ruleid(null,null,null)),[]), explanation(true(${worker[|salary(leapyear)=>MyInteger|]@main},null,ruleid(null,null,null)),[])])])])])
test13 = explanation(true((${worker[|salary(leapyear)=>Number|]@main}, ${worker[|children=>person|]@main}),it is a top query,ruleid(null,null,null)),[explanation(true(${worker[|children=>person|]@main},null,ruleid(null,null,main)),[explanation(true(${person:=:individual@main},it is a base fact,ruleid(null,null,null)),[]), explanation(true(${worker[|children=>individual|]@main},null,ruleid(null,null,null)),[])]), explanation(true(${worker[|salary(leapyear)=>Number|]@main},null,ruleid(null,null,main)),[explanation(true(${MyInteger::Number@main},it is a base fact,ruleid(null,null,null)),[]), explanation(true(${worker[|salary(leapyear)=>MyInteger|]@main},null,ruleid(null,null,null)),[])])])
test14 = explanation(true(${p(1,wages)@main},it is a top query,ruleid(4,justifier_eq_test.ergo,main)),[explanation(true(${father(mary)[believes_in->wages]@main},null,ruleid(null,null,main)),[explanation(true(${father(mary)[believes_in->wages]@main},null,ruleid(null,null,null)),[])]), explanation(true(${r(1,father(mary))@main},null,ruleid(4,justifier_eq_test.ergo,main)),[explanation(true(${father(mary):=:john@main},null,ruleid(null,null,null)),[]), explanation(true(${r(1,john)@main},it is a base fact,ruleid(null,null,null)),[])])])
test15 = explanation(true(${eva:illegitimate@main},it is a top query,ruleid(34,justifier_eq_test.ergo,main)),[explanation(true((\naf bernie[mate->kati]@main),null,ruleid(null,null,main)),[explanation(false(${bernie:=:\object@main},null,ruleid(null,null,null)),[])]), explanation(true(${eva[daddie->bernie]@main},null,ruleid(null,null,main)),[explanation(true(${bernie:=:bernhard@main},null,ruleid(null,null,null)),[]), explanation(true(${daddie:=:father@main},null,ruleid(null,null,null)),[]), explanation(true(${eva[father->bernhard]@main},it is a base fact,ruleid(null,null,null)),[])]), explanation(true(${eva[mom->kati]@main},null,ruleid(null,null,main)),[explanation(true(${kati:=:kathy@main},it is a base fact,ruleid(null,null,null)),[]), explanation(true(${eva[mom->kathy]@main},null,ruleid(null,null,main)),[explanation(true(${kathy:=:catherine@main},it is a base fact,ruleid(null,null,null)),[]), explanation(true(${eva[mom->catherine]@main},null,ruleid(null,null,main)),[explanation(true(${mom:=:mother@main},null,ruleid(null,null,null)),[]), explanation(true(${eva[mother->catherine]@main},it is a base fact,ruleid(null,null,null)),[])])])])])
test17 = explanation(true(${catherine[ancestor->johanna]@main},it is a top query,catherine[ancestor->johanna],ruleinfo(ruleid(ancestor,justifier_eq_test.ergo,main),ancestor is a parent)),[explanation(true(${catherine[parent->johanna]@main},null,catherine[parent->johanna],ruleinfo(ruleid(mother,justifier_eq_test.ergo,main),mother is a parent)),[explanation(true(${catherine[mom->johanna]@main},null,catherine[mom->johanna],ruleinfo(ruleid(null,null,main),axiom|derived by equality substitution)),[explanation(true(${catherine:=:kati@main},null,catherine:=:kati,ruleinfo(ruleid(null,null,null),this is a base fact or a builtin)),[]), explanation(true(${mom:=:mother@main},null,mom:=:mother,ruleinfo(ruleid(null,null,null),this is a base fact or a builtin)),[]), explanation(true(${kati[mother->johanna]@main},it is a base fact,kati[mother->johanna],ruleinfo(ruleid(null,null,null),this is a base fact or a builtin)),[])])])])
test18 = explanation(true(${bernie[ancestor->johanna]@main},it is a top query,bernie[ancestor->johanna],ruleinfo(ruleid(ancestor,justifier_eq_test.ergo,main),ancestor is a parent)),[explanation(true(${bernie[parent->johanna]@main},null,bernie[parent->johanna],ruleinfo(ruleid(mother,justifier_eq_test.ergo,main),mother is a parent)),[explanation(true(${bernie[mom->johanna]@main},null,bernie[mom->johanna],ruleinfo(ruleid(null,null,main),axiom|derived by equality substitution)),[explanation(true(${bernie:=:bernhard@main},null,bernie:=:bernhard,ruleinfo(ruleid(null,null,null),this is a base fact or a builtin)),[]), explanation(true(${mom:=:mother@main},null,mom:=:mother,ruleinfo(ruleid(null,null,null),this is a base fact or a builtin)),[]), explanation(true(${bernhard[mother->johanna]@main},it is a base fact,bernhard[mother->johanna],ruleinfo(ruleid(null,null,null),this is a base fact or a builtin)),[])])])])
test19 = explanation(true(${father:=:daddie@main},it is a top query,father:=:daddie,ruleinfo(ruleid(null,null,main),axiom|transitivity of equality)),[explanation(true(${dad:=:daddie@main},it is a base fact,dad:=:daddie,ruleinfo(ruleid(null,null,null),this is a base fact or a builtin)),[]), explanation(true(${father:=:dad@main},it is a base fact,father:=:dad,ruleinfo(ruleid(null,null,null),this is a base fact or a builtin)),[])])
test20 = explanation(true(${kati:=:catherine@main},it is a top query,ruleid(null,null,main)),[explanation(true(${kathy:=:catherine@main},it is a base fact,ruleid(null,null,null)),[]), explanation(true(${kati:=:kathy@main},it is a base fact,ruleid(null,null,null)),[])])
test21 = explanation(true(${ppp(kathy)@main},it is a top query,ruleid(48,justifier_eq_test.ergo,main)),[explanation(true((\naf ttt(kathy)@main),null,ruleid(48,justifier_eq_test.ergo,main)),[explanation(false(${ttt:=:\object@main},null,ruleid(null,null,null)),[])]), explanation(true(${rrr(kathy)@main},null,ruleid(48,justifier_eq_test.ergo,main)),[explanation(true(${rrr(kati)@main},it is a base fact,ruleid(null,null,null)),[]), explanation(true(${kathy:=:kati@main},null,ruleid(null,null,main)),[explanation(true(${catherine:=:kati@main},null,ruleid(null,null,null)),[]), explanation(true(${kathy:=:catherine@main},it is a base fact,ruleid(null,null,null)),[])])]), explanation(true(${\neg qqq(kathy)@main},null,ruleid(48,justifier_eq_test.ergo,main)),[explanation(true(${\neg qqq(catherine)@main},it is a base fact,ruleid(null,null,null)),[]), explanation(true(${kathy:=:catherine@main},it is a base fact,ruleid(null,null,null)),[])])])
test22 = explanation(true((${worm(\#X2(samuel))@main}, ${eat(samuel,\#X2(samuel))@main}),it is a top query,ruleid(null,null,null)),[explanation(true(${worm(\#X2(samuel))@main},null,ruleid(null,null,main)),[explanation(true(${b1(samuel)@main},null,ruleid(50,justifier_eq_test.ergo,main)),[explanation(true(${bird(samuel)@main},null,ruleid(50,justifier_eq_test.ergo,main)),[explanation(true(${bird(sam)@main},it is a base fact,ruleid(null,null,null)),[]), explanation(true(${samuel:=:sam@main},null,ruleid(null,null,null)),[])])])]), explanation(true(${eat(samuel,\#X2(samuel))@main},null,ruleid(null,null,main)),[explanation(true(${b1(samuel)@main},null,ruleid(50,justifier_eq_test.ergo,main)),[explanation(true(${bird(samuel)@main},null,ruleid(50,justifier_eq_test.ergo,main)),[explanation(true(${bird(sam)@main},it is a base fact,ruleid(null,null,null)),[]), explanation(true(${samuel:=:sam@main},null,ruleid(null,null,null)),[])])])])])
test23 = explanation(true((${\neg worm(\#X2(samuel))@main}; ${\neg eat(tweety,\#X2(samuel))@main}),it is a top query,ruleid(null,null,null)),[explanation(true(${\neg eat(tweety,\#X2(samuel))@main},null,ruleid(null,null,main)),[explanation(true(${b2(tweety)@main},null,ruleid(56,justifier_eq_test.ergo,main)),[explanation(true(${penguin(tweety)@main},it is a base fact,ruleid(null,null,null)),[])]), explanation(true(${worm(\#X2(samuel))@main},null,ruleid(null,null,main)),[explanation(true(${b1(samuel)@main},null,ruleid(50,justifier_eq_test.ergo,main)),[explanation(true(${bird(samuel)@main},null,ruleid(50,justifier_eq_test.ergo,main)),[explanation(true(${bird(sam)@main},it is a base fact,ruleid(null,null,null)),[]), explanation(true(${samuel:=:sam@main},null,ruleid(null,null,null)),[])])])])])])
test24 = explanation(true(${\neg b1:=:b2@main},it is a top query,ruleid(null,null,main)),[explanation(true(${\neg a1:=:a2@main},it is a base fact,ruleid(null,null,null)),[]), explanation(true(${b1:=:a1@main},null,ruleid(null,null,null)),[]), explanation(true(${b2:=:a2@main},null,ruleid(null,null,null)),[])])
test25 = explanation(true(${\neg worker[|wages(humanoid)=>person|]@main},it is a top query,ruleid(null,null,main)),[explanation(true(${person:=:individual@main},it is a base fact,ruleid(null,null,null)),[]), explanation(true(${\neg worker[|wages(humanoid)=>individual|]@main},null,ruleid(null,null,null)),[])])
test26 = explanation(true(${\neg employee[|wages(individual)=>worker|]@main},it is a top query,ruleid(null,null,main)),[explanation(true(${employee:=:worker@main},it is a base fact,ruleid(null,null,null)),[]), explanation(true(${\neg worker[|wages(individual)=>worker|]@main},null,ruleid(null,null,null)),[])])
test27 = explanation(true(${\neg person[|salary(person)=>employee|]@main},it is a top query,ruleid(null,null,main)),[explanation(true(${employee::person@main},it is a base fact,ruleid(null,null,null)),[]), explanation(true(${\neg employee[|salary(person)=>employee|]@main},null,ruleid(null,null,main)),[explanation(true(${employee::person@main},it is a base fact,ruleid(null,null,null)),[]), explanation(true(${\neg employee[|salary(person)=>person|]@main},it is a base fact,ruleid(null,null,null)),[])])])
test28 = explanation(true(${\neg worker[|=>spouse(humanoid)|]@main},it is a top query,ruleid(null,null,null)),[])
test29 = explanation(contradiction(${\neg person[|=>mate(pupil)|]@main},it is a top query,\neg person[|=>mate(pupil)|],ruleinfo(ruleid(null,null,null),derived by the axiom for contradiction)),[explanation(true(${\neg person[|=>mate(pupil)|]@main},null,\neg person[|=>mate(pupil)|],ruleinfo(ruleid(null,null,main),axiom|negative inheritance of Boolean type to subclass)),[explanation(true(${employee::person@main},it is a base fact,employee::person,ruleinfo(ruleid(null,null,null),this is a base fact or a builtin)),[]), explanation(true(${\neg employee[|=>mate(pupil)|]@main},null,\neg employee[|=>mate(pupil)|],ruleinfo(ruleid(null,null,main),axiom|derived by equality substitution)),[explanation(true(${\neg worker[|=>mate(pupil)|]@main},null,\neg worker[|=>mate(pupil)|],ruleinfo(ruleid(null,null,null),this is a base fact or a builtin)),[]), explanation(true(${employee:=:worker@main},it is a base fact,employee:=:worker,ruleinfo(ruleid(null,null,null),this is a base fact or a builtin)),[])])]), explanation(false(${\neg person[|=>mate(pupil)|]@main},null,\neg person[|=>mate(pupil)|],ruleinfo(ruleid(null,null,main),axiom|derived by equality substitution)),[explanation(true(${individual[|=>mate(pupil)|]@main},null,individual[|=>mate(pupil)|],ruleinfo(ruleid(null,null,null),this is a base fact or a builtin)),[]), explanation(true(${person:=:individual@main},it is a base fact,person:=:individual,ruleinfo(ruleid(null,null,null),this is a base fact or a builtin)),[])])])
test30 = explanation(true(${miriam[=>mate(person)]@main},it is a top query,ruleid(null,null,null)),[])
test31 = explanation(true(${\neg foo[=>mate(person)]@main},it is a top query,ruleid(null,null,null)),[])
test32 = explanation(true(${\neg moo1[|=>spouse(individual)|]@main},it is a top query,ruleid(null,null,null)),[])
test33 = explanation(true(${individual[|=>%meth(employee)|]@main},it is a top query,ruleid(null,null,null)),[])
test34 = explanation(true(${worker[|=>%meth(worker)|]@main},it is a top query,ruleid(null,null,null)),[])
test35 = explanation(true(${john[=>%meth(employee)]@main},it is a top query,john[=>%meth(employee)],ruleinfo(ruleid(null,null,main),axiom|inheritance of transactional method type to class member)),[explanation(true(${john:employee@main},it is a base fact,john:employee,ruleinfo(ruleid(null,null,null),this is a base fact or a builtin)),[]), explanation(true(${employee[|=>%meth(employee)|]@main},null,employee[|=>%meth(employee)|],ruleinfo(ruleid(null,null,main),axiom|inheritance of transactional method type to subclass)),[explanation(true(${person[|=>%meth(employee)|]@main},null,person[|=>%meth(employee)|],ruleinfo(ruleid(null,null,main),axiom|derived by equality substitution)),[explanation(true(${individual[|=>%meth(employee)|]@main},null,individual[|=>%meth(employee)|],ruleinfo(ruleid(null,null,null),this is a base fact or a builtin)),[]), explanation(true(${person:=:individual@main},it is a base fact,person:=:individual,ruleinfo(ruleid(null,null,null),this is a base fact or a builtin)),[])]), explanation(true(${employee::person@main},it is a base fact,employee::person,ruleinfo(ruleid(null,null,null),this is a base fact or a builtin)),[])])])
test36 = explanation(true(${mary[=>%nnn(employee)]@main},it is a top query,ruleid(null,null,main)),[explanation(true(${miriam[=>%nnn(employee)]@main},null,ruleid(null,null,null)),[]), explanation(true(${mary:=:miriam@main},it is a base fact,ruleid(null,null,null)),[])])
test37 = explanation(true(${%abc(2)@main},it is a top query,ruleid(88,justifier_eq_test.ergo,w)),[explanation(true(${%pp(2)@w},it is a base fact,ruleid(null,null,null)),[]), explanation(true(${%ww(a,2)@main},it is a base fact,ruleid(null,null,null)),[])])
