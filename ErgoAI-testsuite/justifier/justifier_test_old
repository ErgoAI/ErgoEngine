test1 = explanation(true(${john:human@main},it is a top query,john:human,ruleinfo(ruleid(null,null,main),axiom|transitivity of class member)),[explanation(true(${john:person@main},null,john:person,ruleinfo(ruleid(null,null,main),axiom|transitivity of class member)),[explanation(true(${john:employee@main},it is a base fact,john:employee,ruleinfo(ruleid(null,null,null),this is a base fact or a builtin)),[]), explanation(true(${employee::person@main},it is a base fact,employee::person,ruleinfo(ruleid(null,null,null),this is a base fact or a builtin)),[])]), explanation(true(${person::human@main},it is a base fact,person::human,ruleinfo(ruleid(null,null,null),this is a base fact or a builtin)),[])])
test2 = explanation(true(${employee::human@main},it is a top query,ruleid(null,null,main)),[explanation(true(${employee::person@main},it is a base fact,ruleid(null,null,null)),[]), explanation(true(${person::human@main},it is a base fact,ruleid(null,null,null)),[])])
test3 = explanation(true(${mary[believes_in->nothing]@main},it is a top query,ruleid(null,null,null)),[explanation(true(${mary[believes_in->nothing]@main},it is a base fact,ruleid(null,null,null)),[])])
test4 = explanation(true(${john[believes_in->salary]@main},it is a top query,ruleid(null,null,main)),[explanation(true(${john:employee@main},it is a base fact,ruleid(null,null,null)),[]), explanation(true(${employee[|believes_in->salary|]@main},it is a base fact,ruleid(null,null,null)),[])])
test5 = explanation(true(${bob[believes_in->something]@main},it is a top query,ruleid(null,null,main)),[explanation(true(${bob:person@main},it is a base fact,ruleid(null,null,null)),[]), explanation(true(${person[|believes_in->something|]@main},it is a base fact,ruleid(null,null,null)),[])])
test6 = explanation(true(((${employee[|age=>MyInteger|]@main}, ${employee[|age{1..1}=>?|]@main}), ${employee[|kids=>person|]@main}),it is a top query,ruleid(null,null,null)),[explanation(true(${employee[|age=>MyInteger|]@main},null,ruleid(null,null,main)),[explanation(true(${employee::human@main},null,ruleid(null,null,main)),[explanation(true(${employee::person@main},it is a base fact,ruleid(null,null,null)),[]), explanation(true(${person::human@main},it is a base fact,ruleid(null,null,null)),[])]), explanation(true(${human[|age=>MyInteger|]@main},it is a base fact,ruleid(null,null,null)),[])]), explanation(true(${employee[|kids=>person|]@main},null,ruleid(null,null,main)),[explanation(true(${employee::person@main},it is a base fact,ruleid(null,null,null)),[]), explanation(true(${person[|kids=>person|]@main},it is a base fact,ruleid(null,null,null)),[])]), explanation(true(${employee[|age{1..1}=>?|]@main},null,ruleid(null,null,null)),[])])
test7 = explanation(true(((${john[age=>MyInteger]@main}, ${john[age{1..1}=>?]@main}), ${john[kids=>person]@main}),it is a top query,((john[age=>MyInteger]) and (john[age{1..1}=>?])) and (john[kids=>person]),ruleinfo(ruleid(null,null,null),it is a top query)),[explanation(true(${john[age=>MyInteger]@main},null,john[age=>MyInteger],ruleinfo(ruleid(null,null,main),axiom|inheritance of type to class member)),[explanation(true(${john:human@main},null,john:human,ruleinfo(ruleid(null,null,main),axiom|transitivity of class member)),[explanation(true(${john:person@main},null,john:person,ruleinfo(ruleid(null,null,main),axiom|transitivity of class member)),[explanation(true(${john:employee@main},it is a base fact,john:employee,ruleinfo(ruleid(null,null,null),this is a base fact or a builtin)),[]), explanation(true(${employee::person@main},it is a base fact,employee::person,ruleinfo(ruleid(null,null,null),this is a base fact or a builtin)),[])]), explanation(true(${person::human@main},it is a base fact,person::human,ruleinfo(ruleid(null,null,null),this is a base fact or a builtin)),[])]), explanation(true(${human[|age=>MyInteger|]@main},it is a base fact,human[|age=>MyInteger|],ruleinfo(ruleid(null,null,null),this is a base fact or a builtin)),[])]), explanation(true(${john[kids=>person]@main},null,john[kids=>person],ruleinfo(ruleid(null,null,main),axiom|inheritance of type to class member)),[explanation(true(${john:person@main},null,john:person,ruleinfo(ruleid(null,null,main),axiom|transitivity of class member)),[explanation(true(${john:employee@main},it is a base fact,john:employee,ruleinfo(ruleid(null,null,null),this is a base fact or a builtin)),[]), explanation(true(${employee::person@main},it is a base fact,employee::person,ruleinfo(ruleid(null,null,null),this is a base fact or a builtin)),[])]), explanation(true(${person[|kids=>person|]@main},it is a base fact,person[|kids=>person|],ruleinfo(ruleid(null,null,null),this is a base fact or a builtin)),[])]), explanation(true(${john[age{1..1}=>?]@main},null,john[age{1..1}=>?],ruleinfo(ruleid(null,null,null),this is a base fact or a builtin)),[])])
test8 = explanation(true(((${employee[|age=>Number|]@main}, ${employee[|age{1..1}=>?|]@main}), ${employee[|kids=>human|]@main}),it is a top query,ruleid(null,null,null)),[explanation(true(${employee[|age=>Number|]@main},null,ruleid(null,null,main)),[explanation(true(${employee::person@main},it is a base fact,ruleid(null,null,null)),[]), explanation(true(${person[|age=>Number|]@main},null,ruleid(null,null,main)),[explanation(true(${person::human@main},it is a base fact,ruleid(null,null,null)),[]), explanation(true(${human[|age=>Number|]@main},null,ruleid(null,null,main)),[explanation(true(${MyInteger::Number@main},it is a base fact,ruleid(null,null,null)),[]), explanation(true(${human[|age=>MyInteger|]@main},it is a base fact,ruleid(null,null,null)),[])])])]), explanation(true(${employee[|kids=>human|]@main},null,ruleid(null,null,main)),[explanation(true(${employee::person@main},it is a base fact,ruleid(null,null,null)),[]), explanation(true(${person[|kids=>human|]@main},null,ruleid(null,null,main)),[explanation(true(${person::human@main},it is a base fact,ruleid(null,null,null)),[]), explanation(true(${person[|kids=>person|]@main},it is a base fact,ruleid(null,null,null)),[])])]), explanation(true(${employee[|age{1..1}=>?|]@main},null,ruleid(null,null,null)),[])])
test9 = explanation(true(((${john[age=>Number]@main}, ${john[age{1..1}=>?]@main}), ${john[kids=>human]@main}),it is a top query,ruleid(null,null,null)),[explanation(true(${john[age=>Number]@main},null,ruleid(null,null,main)),[explanation(true(${john:employee@main},it is a base fact,ruleid(null,null,null)),[]), explanation(true(${employee[|age=>Number|]@main},null,ruleid(null,null,main)),[explanation(true(${employee::person@main},it is a base fact,ruleid(null,null,null)),[]), explanation(true(${person[|age=>Number|]@main},null,ruleid(null,null,main)),[explanation(true(${person::human@main},it is a base fact,ruleid(null,null,null)),[]), explanation(true(${human[|age=>Number|]@main},null,ruleid(null,null,main)),[explanation(true(${MyInteger::Number@main},it is a base fact,ruleid(null,null,null)),[]), explanation(true(${human[|age=>MyInteger|]@main},it is a base fact,ruleid(null,null,null)),[])])])])]), explanation(true(${john[kids=>human]@main},null,ruleid(null,null,main)),[explanation(true(${john:employee@main},it is a base fact,ruleid(null,null,null)),[]), explanation(true(${employee[|kids=>human|]@main},null,ruleid(null,null,main)),[explanation(true(${employee::person@main},it is a base fact,ruleid(null,null,null)),[]), explanation(true(${person[|kids=>human|]@main},null,ruleid(null,null,main)),[explanation(true(${person::human@main},it is a base fact,ruleid(null,null,null)),[]), explanation(true(${person[|kids=>person|]@main},it is a base fact,ruleid(null,null,null)),[])])])]), explanation(true(${john[age{1..1}=>?]@main},null,ruleid(null,null,null)),[])])
test10 = explanation(true((${john[salary(leapyear)=>Number]@main}, ${john[kids=>person]@main}),it is a top query,ruleid(null,null,null)),[explanation(true(${john[kids=>person]@main},null,ruleid(null,null,main)),[explanation(true(${john:person@main},null,ruleid(null,null,main)),[explanation(true(${john:employee@main},it is a base fact,ruleid(null,null,null)),[]), explanation(true(${employee::person@main},it is a base fact,ruleid(null,null,null)),[])]), explanation(true(${person[|kids=>person|]@main},it is a base fact,ruleid(null,null,null)),[])]), explanation(true(${john[salary(leapyear)=>Number]@main},null,ruleid(null,null,main)),[explanation(true(${john:employee@main},it is a base fact,ruleid(null,null,null)),[]), explanation(true(${employee[|salary(leapyear)=>Number|]@main},null,ruleid(null,null,main)),[explanation(true(${MyInteger::Number@main},it is a base fact,ruleid(null,null,null)),[]), explanation(true(${employee[|salary(leapyear)=>MyInteger|]@main},null,ruleid(null,null,main)),[explanation(true(method salary(year) is a generalization of salary(leapyear),null,ruleid(null,null,null)),[]), explanation(true(${employee[|salary(year)=>MyInteger|]@main},it is a base fact,ruleid(null,null,null)),[])])])])])
test11 = explanation(true((${employee[|salary(leapyear)=>Number|]@main}, ${employee[|kids=>person|]@main}),it is a top query,ruleid(null,null,null)),[explanation(true(${employee[|kids=>person|]@main},null,ruleid(null,null,main)),[explanation(true(${employee::person@main},it is a base fact,ruleid(null,null,null)),[]), explanation(true(${person[|kids=>person|]@main},it is a base fact,ruleid(null,null,null)),[])]), explanation(true(${employee[|salary(leapyear)=>Number|]@main},null,ruleid(null,null,main)),[explanation(true(${MyInteger::Number@main},it is a base fact,ruleid(null,null,null)),[]), explanation(true(${employee[|salary(leapyear)=>MyInteger|]@main},null,ruleid(null,null,main)),[explanation(true(method salary(year) is a generalization of salary(leapyear),null,ruleid(null,null,null)),[]), explanation(true(${employee[|salary(year)=>MyInteger|]@main},it is a base fact,ruleid(null,null,null)),[])])])])
test12 = explanation(true(${p(1,nothing)@main},it is a top query,ruleid(4,justifier_test.ergo,main)),[explanation(true(${mary[believes_in->nothing]@main},it is a base fact,ruleid(null,null,null)),[]), explanation(true(${r(1,mary)@main},it is a base fact,ruleid(null,null,null)),[])])
test13 = explanation(true(${eva:illegitimate@main},it is a top query,ruleid(40,justifier_test.ergo,main)),[explanation(true((\naf bernhard[spouse->kati]@main),null,ruleid(30,justifier_test.ergo,main)),[explanation(false(${kati[spouse->bernhard]@main},null,ruleid(30,justifier_test.ergo,main)),[explanation(false(${bernhard[spouse->kati]@main},null,ruleid(null,null,null)),[])])]), explanation(true(${eva[father->bernhard]@main},it is a base fact,ruleid(null,null,null)),[]), explanation(true(${eva[mother->kati]@main},it is a base fact,ruleid(null,null,null)),[])])
test13_2 = explanation(true(${eva:illegitimate@main},it is a top query,eva:illegitimate,ruleinfo(ruleid(40,justifier_test.ergo,main),no text given for the relevant rule)),[explanation(false(${bernhard[spouse->kati]@main},null,bernhard[spouse->kati],ruleinfo(ruleid(30,justifier_test.ergo,main),no text given for the relevant rule)),[explanation(false(${kati[spouse->bernhard]@main},null,kati[spouse->bernhard],ruleinfo(ruleid(30,justifier_test.ergo,main),no text given for the relevant rule)),[explanation(false(${bernhard[spouse->kati]@main},null,bernhard[spouse->kati],ruleinfo(ruleid(null,null,null),this is a base fact or a builtin)),[])])]), explanation(true(${eva[father->bernhard]@main},it is a base fact,eva[father->bernhard],ruleinfo(ruleid(null,null,null),this is a base fact or a builtin)),[]), explanation(true(${eva[mother->kati]@main},it is a base fact,eva[mother->kati],ruleinfo(ruleid(null,null,null),this is a base fact or a builtin)),[])])
test14 = explanation(true(${bernhard[ancestor->johanna]@main},it is a top query,ruleid(36,justifier_test.ergo,main)),[explanation(true(${bernhard[parent->johanna]@main},null,ruleid(34,justifier_test.ergo,main)),[explanation(true(${bernhard[mother->johanna]@main},it is a base fact,ruleid(null,null,null)),[])])])
test15 = explanation(true(${father:=:daddie@main},it is a top query,ruleid(null,null,main)),[explanation(true(${dad:=:daddie@main},it is a base fact,ruleid(null,null,null)),[]), explanation(true(${father:=:dad@main},it is a base fact,ruleid(null,null,null)),[])])
test16 = explanation(true(${kati:=:catherine@main},it is a top query,ruleid(null,null,main)),[explanation(true(${kathy:=:catherine@main},it is a base fact,ruleid(null,null,null)),[]), explanation(true(${kati:=:kathy@main},it is a base fact,ruleid(null,null,null)),[])])
test17 = explanation(true(${ppp(kati)@main},it is a top query,ruleid(52,justifier_test.ergo,main)),[explanation(true((\naf ttt(kati)@main),null,ruleid(52,justifier_test.ergo,main)),[explanation(false(${ttt(kati)@main},null,ruleid(null,null,null)),[])]), explanation(true(${rrr(kati)@main},it is a base fact,ruleid(null,null,null)),[]), explanation(true(${\neg qqq(kati)@main},it is a base fact,ruleid(null,null,null)),[])])
test18 = explanation(true((${worm(\#X2(sam))@main}, ${eat(sam,\#X2(sam))@main}),it is a top query,(worm(\#X2(sam))) and (eat(sam,\#X2(sam))),ruleinfo(ruleid(null,null,null),it is a top query)),[explanation(true(${worm(\#X2(sam))@main},null,worm(\#X2(sam)),ruleinfo(ruleid(null,null,main),derived via a builtin axiom (negation, defeasibility, composite goal, etc.))),[explanation(true(${b1(sam)@main},null,b1(sam),ruleinfo(ruleid(r1,justifier_test.ergo,main),Generally birds are worm-eaters)),[explanation(true(${bird(sam)@main},it is a base fact,sam is a bird,ruleinfo(ruleid(null,null,null),this is a base fact or a builtin)),[])])]), explanation(true(${eat(sam,\#X2(sam))@main},null,eat(sam,\#X2(sam)),ruleinfo(ruleid(null,null,main),derived via a builtin axiom (negation, defeasibility, composite goal, etc.))),[explanation(true(${b1(sam)@main},null,b1(sam),ruleinfo(ruleid(r1,justifier_test.ergo,main),Generally birds are worm-eaters)),[explanation(true(${bird(sam)@main},it is a base fact,sam is a bird,ruleinfo(ruleid(null,null,null),this is a base fact or a builtin)),[])])])])
test19 = explanation(true((${\neg worm(\#X2(sam))@main}; ${\neg eat(tweety,\#X2(sam))@main}),it is a top query,(\neg worm(\#X2(sam))) or (\neg eat(tweety,\#X2(sam))),ruleinfo(ruleid(null,null,null),it is a top query)),[explanation(true(${\neg eat(tweety,\#X2(sam))@main},null,\neg eat(tweety,\#X2(sam)),ruleinfo(ruleid(null,null,main),derived via a builtin axiom (negation, defeasibility, composite goal, etc.))),[explanation(true(${b2(tweety)@main},null,b2(tweety),ruleinfo(ruleid(r2,justifier_test.ergo,main),Penguins are not worm-eaters)),[explanation(true(${penguin(tweety)@main},it is a base fact,tweety is a penguin,ruleinfo(ruleid(null,null,null),this is a base fact or a builtin)),[])]), explanation(true(${worm(\#X2(sam))@main},null,worm(\#X2(sam)),ruleinfo(ruleid(null,null,main),derived via a builtin axiom (negation, defeasibility, composite goal, etc.))),[explanation(true(${b1(sam)@main},null,b1(sam),ruleinfo(ruleid(r1,justifier_test.ergo,main),Generally birds are worm-eaters)),[explanation(true(${bird(sam)@main},it is a base fact,sam is a bird,ruleinfo(ruleid(null,null,null),this is a base fact or a builtin)),[])])])])])
test20 = explanation(true(${\neg b1:=:b2@main},it is a top query,\neg b1:=:b2,ruleinfo(ruleid(null,null,main),axiom|contrapositive of equality)),[explanation(true(${\neg a1:=:a2@main},it is a base fact,\neg a1:=:a2,ruleinfo(ruleid(null,null,null),this is a base fact or a builtin)),[]), explanation(true(${b1:=:a1@main},null,b1:=:a1,ruleinfo(ruleid(null,null,null),this is a base fact or a builtin)),[]), explanation(true(${b2:=:a2@main},null,b2:=:a2,ruleinfo(ruleid(null,null,null),this is a base fact or a builtin)),[])])
test21 = explanation(true(${\neg employee[|salary(human)=>person|]@main},it is a top query,ruleid(null,null,main)),[explanation(true(method salary(human) is a generalization of salary(person),null,ruleid(null,null,null)),[]), explanation(true(${\neg employee[|salary(person)=>person|]@main},it is a base fact,ruleid(null,null,null)),[])])
test22 = explanation(true(${\neg employee[|salary(person)=>employee|]@main},it is a top query,ruleid(null,null,main)),[explanation(true(${employee::person@main},it is a base fact,ruleid(null,null,null)),[]), explanation(true(${\neg employee[|salary(person)=>person|]@main},it is a base fact,ruleid(null,null,null)),[])])
test23 = explanation(true(${\neg person[|salary(person)=>employee|]@main},it is a top query,ruleid(null,null,main)),[explanation(true(${employee::person@main},it is a base fact,ruleid(null,null,null)),[]), explanation(true(${\neg employee[|salary(person)=>employee|]@main},null,ruleid(null,null,main)),[explanation(true(${employee::person@main},it is a base fact,ruleid(null,null,null)),[]), explanation(true(${\neg employee[|salary(person)=>person|]@main},it is a base fact,ruleid(null,null,null)),[])])])
test24 = explanation(true(${\neg employee[|=>spouse(human)|]@main},it is a top query,\neg employee[|=>spouse(human)|],ruleinfo(ruleid(null,null,main),axiom|inheritance by Boolean method specialization)),[explanation(true(method spouse(human) is a generalization of spouse(student),null,'method spouse(human) is a generalization of spouse(student)',ruleinfo(ruleid(null,null,null),this is a base fact or a builtin)),[]), explanation(true(${\neg employee[|=>spouse(student)|]@main},it is a base fact,\neg employee[|=>spouse(student)|],ruleinfo(ruleid(null,null,null),this is a base fact or a builtin)),[])])
test25 = explanation(contradiction(${\neg person[|=>spouse(student)|]@main},it is a top query,derived by the axiom for contradiction),[explanation(true(${\neg person[|=>spouse(student)|]@main},null,ruleid(null,null,main)),[explanation(true(${employee::person@main},it is a base fact,ruleid(null,null,null)),[]), explanation(true(${\neg employee[|=>spouse(student)|]@main},it is a base fact,ruleid(null,null,null)),[])]), explanation(false(${\neg person[|=>spouse(student)|]@main},null,ruleid(null,null,main)),[explanation(true(method spouse(person) is a generalization of spouse(student),null,ruleid(null,null,null)),[]), explanation(true(${person[|=>spouse(person)|]@main},it is a base fact,ruleid(null,null,null)),[])])])
test26 = explanation(true(${mary[=>spouse(person)]@main},it is a top query,ruleid(null,null,main)),[explanation(true(${person[|=>spouse(person)|]@main},it is a base fact,ruleid(null,null,null)),[]), explanation(true(${mary:person@main},it is a base fact,ruleid(null,null,null)),[])])
test27 = explanation(true(${\neg foo[=>spouse(person)]@main},it is a top query,ruleid(null,null,main)),[explanation(true(method spouse(person) is a generalization of spouse(student),null,ruleid(null,null,null)),[]), explanation(true(${\neg foo[=>spouse(student)]@main},it is a base fact,ruleid(null,null,null)),[])])
test28 = explanation(true(${\neg moo[|=>spouse(person)|]@main},it is a top query,\neg moo[|=>spouse(person)|],ruleinfo(ruleid(null,null,main),axiom|negative inheritance of Boolean type to class member)),[explanation(true(${foo:moo@main},it is a base fact,foo:moo,ruleinfo(ruleid(null,null,null),this is a base fact or a builtin)),[]), explanation(true(${\neg foo[=>spouse(person)]@main},null,\neg foo[=>spouse(person)],ruleinfo(ruleid(null,null,main),axiom|inheritance by Boolean  method specialization)),[explanation(true(method spouse(person) is a generalization of spouse(student),null,'method spouse(person) is a generalization of spouse(student)',ruleinfo(ruleid(null,null,null),this is a base fact or a builtin)),[]), explanation(true(${\neg foo[=>spouse(student)]@main},it is a base fact,\neg foo[=>spouse(student)],ruleinfo(ruleid(null,null,null),this is a base fact or a builtin)),[])])])
test29 = explanation(true(${person[|=>%meth(employee)|]@main},it is a top query,ruleid(null,null,main)),[explanation(true(method meth(person) is a generalization of meth(employee),null,ruleid(null,null,null)),[]), explanation(true(${person[|=>%meth(person)|]@main},it is a base fact,ruleid(null,null,null)),[])])
test30 = explanation(true(${employee[|=>%meth(employee)|]@main},it is a top query,ruleid(null,null,main)),[explanation(true(${person[|=>%meth(employee)|]@main},null,ruleid(null,null,main)),[explanation(true(method meth(person) is a generalization of meth(employee),null,ruleid(null,null,null)),[]), explanation(true(${person[|=>%meth(person)|]@main},it is a base fact,ruleid(null,null,null)),[])]), explanation(true(${employee::person@main},it is a base fact,ruleid(null,null,null)),[])])
test31 = explanation(true(${john[=>%meth(employee)]@main},it is a top query,ruleid(null,null,main)),[explanation(true(${john:employee@main},it is a base fact,ruleid(null,null,null)),[]), explanation(true(${employee[|=>%meth(employee)|]@main},null,ruleid(null,null,main)),[explanation(true(${person[|=>%meth(employee)|]@main},null,ruleid(null,null,main)),[explanation(true(method meth(person) is a generalization of meth(employee),null,ruleid(null,null,null)),[]), explanation(true(${person[|=>%meth(person)|]@main},it is a base fact,ruleid(null,null,null)),[])]), explanation(true(${employee::person@main},it is a base fact,ruleid(null,null,null)),[])])])
test32 = explanation(true(${mary[=>%mmm(employee)]@main},it is a top query,ruleid(null,null,main)),[explanation(true(method mmm(person) is a generalization of mmm(employee),null,ruleid(null,null,null)),[]), explanation(true(${mary[=>%mmm(person)]@main},it is a base fact,ruleid(null,null,null)),[])])
test33 = explanation(true(${%abc(2)@main},it is a top query,ruleid(88,justifier_test.ergo,w)),[explanation(true(${%pp(2)@w},it is a base fact,ruleid(null,null,null)),[]), explanation(true(${%ww(a,2)@main},it is a base fact,ruleid(null,null,null)),[])])
