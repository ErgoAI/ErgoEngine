
:- use_argumentation_theory{gcle}.
?- [atck3>>gcle].

/* Each situation exists at a particular time. */
Situation [time{1..1}=>symbol].

/**/


/* parent is alive in a Situation with time t0, but joe is not */
@{\#} a(p)(\#1:Situation), \#1[time->t0].
@{\#} \neg a(j)(?s0) :- ?s0:Situation[time->t0].

/* if parent is alive in some Situation with time t2, then joe is
alive in a Situation with time t3 */

@{\#} a(j)(\#1:Situation),\#1[time->t3] :- ?_s2[time->t2], a(p)(?_s2:Situation). 

/* if joe is alive in a Situation with time t3, then he time travels
to a Situation with time t1 (then returns to s3) */

@{\#} t(j,?s3:Situation,\#1:Situation), \#1[time->t1] :- ?s3[time->t3], a(j)(?s3:Situation).

/* if joe time travels, then he fires the gun at parent in s1 */

@{\#} f(j,p)(?s1:Situation) :- ?_s3[time->t3],?s1[time->t1], t(j,?_s3:Situation,?s1:Situation).

/* if the gun is fired at parent at t1, then the parent is dead in all
Situations having t2 */

@{\#} \neg a(p)(?s2) :- ?_s1[time->t1], f(j,p)(?_s1:Situation), ?s2:Situation[time->t2].

// possible alternate to consider:
/* if the gun is fired at parent at t1, then the parent is dead in a
Situation having t2 */
// @{\#} \#2:Situation[time->t2], \neg a(p)(\#2) :- f(j,p)(?_s1:Situation[time->t1]).


//////////////////////

/* persistence axioms about aliveness 
   Note: There's an intentional asymmetry in this version.
     The positive axioms say
     if X is alive at time t in some Situation, then 
       there *exists* a Situation having time t+1 in which he's alive
     The negative axioms say:
     if X is not alive at time t in some Situation, then 
       *forall* Situations with time t+1 he's not alive
*/
@{pe} a(p)(\#1:Situation), \#1[time->t1] :- ?_s0[time->t0], a(p)(?_s0:Situation).
@{pe} \neg a(p)(?s1) :- ?s0:Situation[time->t0], \neg a(p)(?s0), ?s1:Situation[time->t1].
@{pe} a(p)(\#1:Situation), \#1[time->t2] :- ?_s1[time->t1], a(p)(?_s1:Situation).
@{pe} \neg a(p)(?s2) :- ?s1:Situation[time->t1], \neg a(p)(?s1), ?s2:Situation[time->t2].
@{pe} a(p)(\#1:Situation), \#1[time->t3] :- ?_s2[time->t2], a(p)(?_s2:Situation).
@{pe} \neg a(p)(?s3) :- ?s2:Situation[time->t2], \neg a(p)(?s2), ?s3:Situation[time->t3].

@{pe} a(j)(\#1:Situation), \#1[time->t1] :- ?_s0[time->t0], a(j)(?_s0:Situation).
@{pe} \neg a(j)(?s1) :- ?s0:Situation[time->t0], \neg a(j)(?s0), ?s1:Situation[time->t1].
@{pe} a(j)(\#1:Situation), \#1[time->t2] :- ?_s1[time->t1], a(j)(?_s1:Situation).
@{pe} \neg a(j)(?s2) :- ?s1:Situation[time->t1], \neg a(j)(?s1), ?s2:Situation[time->t2].
@{pe} a(j)(\#1:Situation), \#1[time->t3] :- ?_s2[time->t2], a(j)(?_s2:Situation).
@{pe} \neg a(j)(?s3) :- ?s2:Situation[time->t2], \neg a(j)(?s2), ?s3:Situation[time->t3].


// interestingly, the following matters here, but not in other
// argumentation theories
/* persistence rules are lowest-pri */
\overrides(?L,pe) :- tag{?L, ?}, ?L != pe. 
/*
  Unlike old/new gclp, GCLE gives the following results:
     true: a(p)(?s2:Situation[time->t2])
           a(j)(?s3:Situation[time->t3])
           \neg a(j)(?s3:Situation[time->t3])
           t(j,?s3:Situation[time->t3],?s1:Situation[time->t1])
           f(j,p)(?s1:Situation[time->t1])
     false: \neg a(p)(?s2:Situation[time->t2])

  Under the old/new gclp all these are undefined.
*/

%pretest :-
    write('Test #1: ')@\plg,
    // all should be undefined
    \if ( undefined{(a(p)(?s2:Situation), ?s2[time->t2])},
         undefined{\neg (a(p)(?s2:Situation),?s2[time->t2])},
	 undefined{a(j)(?s3:Situation), ?s3[time->t3]},
	 undefined{\neg (a(j)(?s3:Situation), ?s3[time->t3])},
	 undefined{t(j,?s3:Situation,?s1:Situation),?s3[time->t3],?s1[time->t1]},
	 undefined{(f(j,p)(?s1:Situation),?s1[time->t1])} )
    \then
       writeln(passed1)@\plg
    \else
       writeln(failed1)@\plg,

    write('Test #2: ')@\plg,
    // none should be true
    \if ( true{a(p)(?s2:Situation), ?s2[time->t2]} ;
         true{\neg (a(p)(?s2:Situation), ?s2[time->t2])} ;
	 true{a(j)(?s3:Situation), ?s3[time->t3]} \or
	 true{\neg (a(j)(?s3:Situation), ?s3[time->t3])} ;
	 true{t(j,?s3:Situation,?s1:Situation), ?s3[time->t3],?s1[time->t1]} ;
	 true{f(j,p)(?s1:Situation), ?s1[time->t1]} )
    \then
       writeln(failed2)@\plg
    \else
       writeln(passed2)@\plg,

    write('Test #3: ')@\plg,
    // none should be false
    \if ( false{a(p)(?s2:Situation), ?s2[time->t2]} \or
         false{\neg (a(p)(?s2:Situation),?s2[time->t2])} \or
	 false{a(j)(?s3:Situation),?s3[time->t3]} \or
	 false{\neg (a(j)(?s3:Situation), ?s3[time->t3])} \or
	 false{t(j,?s3:Situation,?s1:Situation), ?s3[time->t3],?s1[time->t1]} \or
	 false{f(j,p)(?s1:Situation),?s1[time->t1]} )
    \then
       writeln(failed3)@\plg
    \else
       writeln(passed3)@\plg.

%test :- tell(temp)@\plg(),
	Method[mustDefine(on)]@\sys,
	%pretest,
	Method[mustDefine(off)]@\sys,
	//\abolishtables,
	%pretest,
	told@\plg().
