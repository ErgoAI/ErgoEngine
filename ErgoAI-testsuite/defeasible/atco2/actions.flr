:- use_argumentation_theory{AT}.
?- [atco2>>AT].

:- ignore_depchk{%check_state(?)}.

// Example 1
@{tdf1,tdf1n} dies(?s1,?x,?f,?y) :-
	isnumber{?s1},
	?s \is ?s1-1,
	?s > 0,
	occurs(?s,toxicDischarge,?x),
	river(?x),
	fishPopulationOf(?s,?x,?f,?y).

@{pe1,pe1n}  \neg dies(?s1,?x,?f,?y) :-
	isnumber{?s1},
	?s \is ?s1-1,
	?s > 0,
	\neg dies(?s,?x,?f,?y),
	river(?x),
	fishPopulationOf(?s,?x,?f,?y).

@{pe2,pe2n}  fishPopulationOf(?s1,?x,?f,?y) :-
	isnumber{?s1},
	?s \is ?s1-1,
	?s > 0,
	river(?x),
	fishPopulationOf(?s,?x,?f,?y).

\overrides(tdf1,pe1).

river(Squamish).

fishPopulationOf(1,Squamish,trout,400).

occurs(2,toxicDischarge,Squamish).
// next fact missing in BG?
\neg dies(1,Squamish,trout,400).

%tst1 :- dies(3,Squamish,trout,400) \and 
	  \neg dies(2,Squamish,trout,400).


// Example 2

@{cmove1,cmove1n} loc(nxt(?s),?x,?z) \and \neg loc(nxt(?s),?x,?y) :-
	occurs(?s,move(?x,?y,?z)),
	loc(?s,?x,?y),
	\naf loc(?s,?_w,?z).

/* Note: in the above, the subgoal (forall ?w. \neg loc(?s,?w,?z))
   was translated as subgoal \naf loc(?s,?w,?z), which means
   Naf exists ?w such that loc(?s,?w,?z). Not completely kosher,
   but do not know how to translate forall \neg otherwise.
*/
@!{pee1rule1} @{pee1,pee1n} loc(nxt(?s),?x,?y) :-
	%check_state(?s),
	loc(?s,?x,?y).

@{pee2,pee2n} \neg loc(nxt(?s),?x,?y) :-
	%check_state(?s),
	\neg loc(?s,?x,?y).

@!{cwarule} @{cwa_loc} @{cwa_loc_n} \neg loc(?_s,?_y,?_z).
/*
  It is important that this initial fact have a label,
  so it would override cwa_loc.
*/
@!{pee1rule0} @{pee1,pee1nn} loc(0,block4,square7).

// should be disqualified by cwa - just for testing
@{p,p_n} loc(nxt(nxt(nxt(nxt(0)))),block4,square7).

occurs(nxt(0),move(block4,square7,square3)).

\overrides(cmove1,pee1).
\overrides(cmove1,pee2).
\overrides(cmove1,cwa_loc).
\overrides(pee1,cwa_loc).

/*
  We must ground ?x and ?y before comparing them using !+,
  since otherwise != is a non-logical operation (?- 1 != ?X is false).
*/
\opposes(loc(?_s,?_x,?y),loc(?_s,?_x,?z)) :-
	position(?y),
	position(?z),
	?y != ?z.

position(square1). position(square2). position(square3). position(square4).
position(square5). position(square6). position(square7). position(square8).

%check_state(?s) :- isground{?s}, !.
%check_state(?s) :-
	abort(['Nonground state found: ',
		?s,
		'. Might cause infinite recursion.'])@\sys.


%tst2 :- loc(nxt(nxt(0)),block4,square3) 
           \and loc(nxt(nxt(nxt(0))),block4,square3)
           \and \naf loc(nxt(nxt(nxt(nxt(0)))),block4,square3) // this is defeated
	   \and \neg loc(nxt(nxt(0)),block4,square7)
	   \and loc(nxt(0),block4,square7). 

%tst3 :- collectset{?X|status(cwarule,\@F,\neg loc(0,block4,square7))[howDefeated->?X]@AT} = ?L, writeln(tst3=?L)@\io.

%tst4 :- collectset{?X|status(cwarule,\@F,\neg loc(nxt(0),block4,square7))[howDefeated->?X]@AT} = ?L, writeln(tst4=?L)@\io.

%tst5 :- collectset{?X|status(cwarule,\@F,\neg loc(nxt(nxt(0)),block4,square7))[howDefeated->?X]@AT} = ?L, writeln(tst5=?L)@\io.

%tst6 :- collectset{?O|status(?R,\@F,loc(nxt(nxt(0)),block4,square3))[howDefeated->?X]@AT, ?O = ?R+?X} = ?L, writeln(tst6=?L)@\io.

%pretest :- %tst1, %tst2, %tst3, %tst4, %tst5, %tst6.

%test :- tell(temp)@\plg(),
	Method[mustDefine(on)]@\sys,
	%pretest,
	Method[mustDefine(off)]@\sys,
	//\abolishtables,
	%pretest,
	told@\plg.
