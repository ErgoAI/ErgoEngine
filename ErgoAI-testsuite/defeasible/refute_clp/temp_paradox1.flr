:- use_argumentation_theory{rclp}.
?- [refute_clp>>rclp].

// here we have no overrides, so all defeats are supposed to be happening
// by rebuttal. So, in refute_clp nothing will get defeated.

/* parent is alive in init state s0, but joe is not */
@{\#} a(p)(s0). 
@{\#} \neg a(j)(s0).

/* parent conceives joe if parent is alive in s2, so then joe is alive in s3 */
@{\#} a(j)(s3) :- a(p)(s2). 

/* if joe is alive in s3, then he time travels to s1..s2, then returns to s3 */
@{\#} t(j,s3,s1) :- a(j)(s3).

/* if joe time travels, then he fires the gun at parent in s1 */
@{\#} f(j,p)(s1) :- t(j,s3,s1).

/* if the gun is fired at parent in s1, then the parent is dead in s2 */
@{\#} \neg a(p)(s2) :- f(j,p)(s1).

/* persistence axioms about aliveness */
@{pe} a(p)(s3) :- a(p)(s2).
@{pe} \neg a(p)(s3) :- \neg a(p)(s2).
@{pe} a(p)(s2) :- a(p)(s1).
@{pe} \neg a(p)(s2) :- \neg a(p)(s1).
@{pe} a(p)(s1) :- a(p)(s0).
@{pe} \neg a(p)(s1) :- \neg a(p)(s0).

@{pe} a(j)(s3) :- a(j)(s2).
@{pe} \neg a(j)(s3) :- \neg a(j)(s2).
@{pe} a(j)(s2) :- a(j)(s1).
@{pe} \neg a(j)(s2) :- \neg a(j)(s1).
@{pe} a(j)(s1) :- a(j)(s0).
@{pe} \neg a(j)(s1) :- \neg a(j)(s0).

// interestingly, the following does not matter!
/* persistence rules are lowest-pri */
//\overrides(?L,pe) :- tag{?L, ?}, ?L != pe. 

%pretest :-
    write('Test #1: ')@\plg,
    // all should be true, as nothing is defeated
    \if ( true{a(p)(s2)},
         (true{\neg a(p)(s2)}, false{\neg a(p)(s2)}),
	 true{a(j)(s3)},
	 (true{\neg a(j)(s3)}, false{\neg a(j)(s3)}),
	 true{t(j,s3,s1)},
	 true{f(j,p)(s1)} )
    \then
       writeln(passed)@\plg
    \else
       writeln(failed)@\plg,

    write('Test #2: ')@\plg,
    // all should be true: nothing is defeated
    \if ( true{a(p)(s2)} ;
         (true{\neg a(p)(s2)}, false{\neg a(p)(s2)}) ;
	 true{a(j)(s3)} \or
	 (true{\neg a(j)(s3)}, false{\neg a(j)(s3)}) ;
	 true{t(j,s3,s1)} ;
	 true{f(j,p)(s1)} )
    \then
       writeln(passed)@\plg
    \else
       writeln(failed)@\plg,

    write('Test #3: ')@\plg,
    // note: \neg implies \naf so the negated parts must be both true and false
    \if ( false{a(p)(s2)},
         false{\neg a(p)(s2)},
         true{\neg a(p)(s2)},
	 false{a(j)(s3)},
	 false{\neg a(j)(s3)},
	 true{\neg a(j)(s3)},
         /*
           In other CLPs, the next two are false, but here they remain true.
           Because here we have no overrides, so these two cannot be defeated.
         */
	 true{t(j,s3,s1)},
	 true{f(j,p)(s1)} )
    \then
       writeln(passed)@\plg
    \else
       writeln(failed)@\plg.

%test :- tell(temp)@\plg(),
	Method[mustDefine(on)]@\sys,
	%pretest,
	Method[mustDefine(off)]@\sys,
	//\abolishtables,
	%pretest,
	told@\plg().
