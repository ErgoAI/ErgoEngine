/* File:      flrhypothetical.P - execute a transactional goal hypothetically
**
** Author(s): Michael Kifer
**
** Contact:   flora-users@lists.sourceforge.net
**
** Copyright (C) by
**      The Research Foundation of the State University of New York, 2008-2021;
**      and Vulcan, Inc., 2010-2013.
**
** Licensed under the Apache License, Version 2.0 (the "License");
** you may not use this file except in compliance with the License.
** You may obtain a copy of the License at
**
**      http://www.apache.org/licenses/LICENSE-2.0
**
** Unless required by applicable law or agreed to in writing, software
** distributed under the License is distributed on an "AS IS" BASIS,
** WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
** See the License for the specific language governing permissions and
** limitations under the License.
**
**
*/


:- compiler_options([xpp_on]).
#mode standard Prolog


#include "flora_terms.flh"

:- import flora_generalize_callable_context/2 from flrtrim.

%% Possible
FLLIBHYPOTHETICAL(FL_POSSIBLE,Call)  :-
        flora_generalize_callable_context(Call,Call1),
        AugmCall = (Call1, FLORA_DELAY_CHECKER([Call1],[])),
	findall(Call1,AugmCall,Result),
        !,
	'_$_flora_one_by_one'(Call1,Result).

%% Impossible
FLLIBHYPOTHETICAL(FL_IMPOSSIBLE,Call) :-
        flora_generalize_callable_context(Call,Call1),
        AugmCall = (Call1, FLORA_DELAY_CHECKER([Call1],[])),
        findall(Call1,AugmCall,Result),
        Result = [].

'_$_flora_one_by_one'(_Call,[]) :- !, fail.
'_$_flora_one_by_one'(Call,[H|_]) :- Call = H.
'_$_flora_one_by_one'(Call,[_|Rest]) :-
	'_$_flora_one_by_one'(Call,Rest).
