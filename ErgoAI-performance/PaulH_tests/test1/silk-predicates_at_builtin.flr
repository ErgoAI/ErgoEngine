:- use_argumentation_theory{ogcle} .
?- [ogclpe>>ogcle] .
:- iriprefix silkb = "http://vulcan.com/2008/silk-builtins#" .
:- iriprefix dc = "http://purl.org/dc/elements/1.1/" .

//SWRLB
%"http://www.w3.org/2003/11/swrlb#add"^^\iri(?output, ?input1, ?input2) :- addBP1(?output, ?input1, ?input2)@\prologall .
 
%"http://www.w3.org/2003/11/swrlb#abs"^^\iri(?output, ?input1) :- absBP1(?output, ?input1)@\prologall .
 
%"http://www.w3.org/2003/11/swrlb#ceiling"^^\iri(?output, ?input1) :- ceilingBP1(?output, ?input1)@\prologall .
 
%"http://www.w3.org/2003/11/swrlb#cos"^^\iri(?output, ?input1) :- cosBP1(?output, ?input1)@\prologall .
 
%"http://www.w3.org/2003/11/swrlb#divide"^^\iri(?output, ?input1, ?input2) :- divideBP1(?output, ?input1, ?input2)@\prologall .
 
%"http://www.w3.org/2003/11/swrlb#floor"^^\iri(?output, ?input1) :- floorBP1(?output, ?input1)@\prologall .
 
%"http://www.w3.org/2003/11/swrlb#integerDivide"^^\iri(?output, ?input1, ?input2) :- integerDivideBP1(?output, ?input1, ?input2)@\prologall .
 
%"http://www.w3.org/2003/11/swrlb#mod"^^\iri(?output, ?input1, ?input2) :- modBP1(?output, ?input1, ?input2)@\prologall .
 
%"http://www.w3.org/2003/11/swrlb#multiply"^^\iri(?output, ?input1, ?input2) :- multiplyBP1(?output, ?input1, ?input2)@\prologall .
 
%"http://www.w3.org/2003/11/swrlb#pow"^^\iri(?output, ?input1, ?input2) :- powBP1(?output, ?input1, ?input2)@\prologall .
 
%"http://www.w3.org/2003/11/swrlb#round"^^\iri(?output, ?input1) :- roundBP1(?output, ?input1)@\prologall .
 
%"http://www.w3.org/2003/11/swrlb#roundHalfToEven"^^\iri(?output, ?input1) :- roundHalfToEvenBP1(?output, ?input1)@\prologall .
 
%"http://www.w3.org/2003/11/swrlb#sin"^^\iri(?output, ?input1) :- sinBP1(?output, ?input1)@\prologall .
 
%"http://www.w3.org/2003/11/swrlb#subtract"^^\iri(?output, ?input1, ?input2) :- subtractBP1(?output, ?input1, ?input2)@\prologall .
 
%"http://www.w3.org/2003/11/swrlb#tan"^^\iri(?output, ?input1) :- tanBP1(?output, ?input1)@\prologall .
 
%"http://www.w3.org/2003/11/swrlb#unaryMinus"^^\iri(?output, ?input1) :- unaryMinusBP1(?output, ?input1)@\prologall .
 
%"http://www.w3.org/2003/11/swrlb#unaryPlus"^^\iri(?output, ?input1) :- unaryPlusBP1(?output, ?input1)@\prologall .
 
%"http://www.w3.org/2003/11/swrlb#addDayTimeDurations"^^\iri(?output, ?input1, ?input2) :- addDayTimeDurationsBP1(?output, ?input1, ?input2)@\prologall .
 
%"http://www.w3.org/2003/11/swrlb#addDayTimeDurationToDate"^^\iri(?output, ?input1, ?input2) :- addDayTimeDurationToDateBP1(?output, ?input1, ?input2)@\prologall .
 
%"http://www.w3.org/2003/11/swrlb#addDayTimeDurationToDateTime"^^\iri(?output, ?input1, ?input2) :- addDayTimeDurationToDateTimeBP1(?output, ?input1, ?input2)@\prologall .
 
%"http://www.w3.org/2003/11/swrlb#addDayTimeDurationToTime"^^\iri(?output, ?input1, ?input2) :- addDayTimeDurationToTimeBP1(?output, ?input1, ?input2)@\prologall .
 
%"http://www.w3.org/2003/11/swrlb#addYearMonthDurations"^^\iri(?output, ?input1, ?input2) :- addYearMonthDurationsBP1(?output, ?input1, ?input2)@\prologall .
 
%"http://www.w3.org/2003/11/swrlb#addYearMonthDurationToDate"^^\iri(?output, ?input1, ?input2) :- addYearMonthDurationToDateBP1(?output, ?input1, ?input2)@\prologall .
 
%"http://www.w3.org/2003/11/swrlb#addYearMonthDurationToDateTime"^^\iri(?output, ?input1, ?input2) :- addYearMonthDurationToDateTimeBP1(?output, ?input1, ?input2)@\prologall .
 
%"http://www.w3.org/2003/11/swrlb#date"^^\iri(?output, ?year, ?month, ?day, ?timeZone) :- dateBP1(?output, ?year, ?month, ?day, ?timeZone)@\prologall .
 
%"http://www.w3.org/2003/11/swrlb#dateTime"^^\iri(?output, ?year, ?month, ?day, ?hours, ?minutes, ?seconds, ?timeZone) :- dateTimeBP1(?output, ?year, ?month, ?day, ?hours, ?minutes, ?seconds, ?timeZone)@\prologall .
 
%"http://www.w3.org/2003/11/swrlb#dayTimeDuration"^^\iri(?output, ?days, ?hours, ?minutes, ?seconds) :- dayTimeDurationBP1(?output, ?days, ?hours, ?minutes, ?seconds)@\prologall .
 
%"http://www.w3.org/2003/11/swrlb#divideDayTimeDuration"^^\iri(?output, ?input1, ?input2) :- divideDayTimeDurationBP1(?output, ?input1, ?input2)@\prologall .
 
%"http://www.w3.org/2003/11/swrlb#divideYearMonthDuration"^^\iri(?output, ?input1, ?input2) :- divideYearMonthDurationBP1(?output, ?input1, ?input2)@\prologall .
 
%"http://www.w3.org/2003/11/swrlb#multiplyDayTimeDuration"^^\iri(?output, ?input1, ?input2) :- multiplyDayTimeDurationBP1(?output, ?input1, ?input2)@\prologall .
 
%"http://www.w3.org/2003/11/swrlb#multiplyYearMonthDuration"^^\iri(?output, ?input1, ?input2) :- multiplyYearMonthDurationBP1(?output, ?input1, ?input2)@\prologall .
 
%"http://www.w3.org/2003/11/swrlb#subtractDates"^^\iri(?output, ?input1, ?input2) :- subtractDatesBP1(?output, ?input1, ?input2)@\prologall .
 
%"http://www.w3.org/2003/11/swrlb#subtractDateTimesYieldingDayTimeDuration"^^\iri(?output, ?input1, ?input2) :- subtractDateTimesYieldingDayTimeDurationBP1(?output, ?input1, ?input2)@\prologall .
 
%"http://www.w3.org/2003/11/swrlb#subtractDateTimesYieldingYearMonthDuration"^^\iri(?output, ?input1, ?input2) :- subtractDateTimesYieldingYearMonthDurationBP1(?output, ?input1, ?input2)@\prologall .
 
%"http://www.w3.org/2003/11/swrlb#subtractDayTimeDurationFromDate"^^\iri(?output, ?input1, ?input2) :- subtractDayTimeDurationFromDateBP1(?output, ?input1, ?input2)@\prologall .
 
%"http://www.w3.org/2003/11/swrlb#subtractDayTimeDurationFromDateTime"^^\iri(?output, ?input1, ?input2) :- subtractDayTimeDurationFromDateTimeBP1(?output, ?input1, ?input2)@\prologall .
 
%"http://www.w3.org/2003/11/swrlb#subtractDayTimeDurationFromTime"^^\iri(?output, ?input1, ?input2) :- subtractDayTimeDurationFromTimeBP1(?output, ?input1, ?input2)@\prologall .
 
%"http://www.w3.org/2003/11/swrlb#subtractDayTimeDurations"^^\iri(?output, ?input1, ?input2) :- subtractDayTimeDurationsBP1(?output, ?input1, ?input2)@\prologall .
 
%"http://www.w3.org/2003/11/swrlb#subtractTimes"^^\iri(?output, ?input1, ?input2) :- subtractTimesBP1(?output, ?input1, ?input2)@\prologall .
 
%"http://www.w3.org/2003/11/swrlb#subtractYearMonthDurationFromDate"^^\iri(?output, ?input1, ?input2) :- subtractYearMonthDurationFromDateBP1(?output, ?input1, ?input2)@\prologall .
 
%"http://www.w3.org/2003/11/swrlb#subtractYearMonthDurationFromDateTime"^^\iri(?output, ?input1, ?input2) :- subtractYearMonthDurationFromDateTimeBP1(?output, ?input1, ?input2)@\prologall .
 
%"http://www.w3.org/2003/11/swrlb#subtractYearMonthDurations"^^\iri(?output, ?input1, ?input2) :- subtractYearMonthDurationsBP1(?output, ?input1, ?input2)@\prologall .
 
%"http://www.w3.org/2003/11/swrlb#time"^^\iri(?output, ?hours, ?minutes, ?seconds, ?timeZone) :- timeBP1(?output, ?hours, ?minutes, ?seconds, ?timeZone)@\prologall .
 
%"http://www.w3.org/2003/11/swrlb#yearMonthDuration"^^\iri(?output, ?years, ?months) :- yearMonthDurationBP1(?output, ?years, ?months)@\prologall .
 
%"http://www.w3.org/2003/11/swrlb#equal"^^\iri(?input1, ?input2) :- equalBP1(?input1, ?input2)@\prologall .
 
%"http://www.w3.org/2003/11/swrlb#greaterThan"^^\iri(?input1, ?input2) :- greaterThanBP1(?input1, ?input2)@\prologall .
 
%"http://www.w3.org/2003/11/swrlb#greaterThanOrEqual"^^\iri(?input1, ?input2) :- greaterThanOrEqualBP1(?input1, ?input2)@\prologall .
 
%"http://www.w3.org/2003/11/swrlb#lessThan"^^\iri(?input1, ?input2) :- lessThanBP1(?input1, ?input2)@\prologall .
 
%"http://www.w3.org/2003/11/swrlb#lessThanOrEqual"^^\iri(?input1, ?input2) :- lessThanOrEqualBP1(?input1, ?input2)@\prologall .
 
%"http://www.w3.org/2003/11/swrlb#notEqual"^^\iri(?input1, ?input2) :- notEqualBP1(?input1, ?input2)@\prologall .
 
%"http://www.w3.org/2003/11/swrlb#anyURI"^^\iri(?uri, ?protocol, ?domain, ?port, ?part1, ?part2, ?fragment) :- anyURIBP1(?uri, ?protocol, ?domain, ?port, ?part1, ?part2, ?fragment)@\prologall .
%"http://www.w3.org/2003/11/swrlb#anyURI"^^\iri(?uri, ?protocol, ?domain, ?port, ?part1, ?part2, ?fragment) :- anyURIBP2(?uri, ?protocol, ?domain, ?port, ?part1, ?part2, ?fragment)@\prologall .
 
%"http://www.w3.org/2003/11/swrlb#resolveURI"^^\iri(?output, ?input1, ?input2) :- resolveURIBP1(?output, ?input1, ?input2)@\prologall .
 
%"http://www.w3.org/2003/11/swrlb#contains"^^\iri(?input1, ?input2) :- containsBP1(?input1, ?input2)@\prologall .
 
%"http://www.w3.org/2003/11/swrlb#containsIgnoreCase"^^\iri(?input1, ?input2) :- containsIgnoreCaseBP1(?input1, ?input2)@\prologall .
 
%"http://www.w3.org/2003/11/swrlb#endsWith"^^\iri(?input1, ?input2) :- endsWithBP1(?input1, ?input2)@\prologall .
 
%"http://www.w3.org/2003/11/swrlb#lowerCase"^^\iri(?output, ?input) :- lowerCaseBP1(?output, ?input)@\prologall .
 
%"http://www.w3.org/2003/11/swrlb#matches"^^\iri(?input1, ?input2) :- matchesBP1(?input1, ?input2)@\prologall .
 
%"http://www.w3.org/2003/11/swrlb#normalizeSpace"^^\iri(?output, ?input) :- normalizeSpaceBP1(?output, ?input)@\prologall .
 
%"http://www.w3.org/2003/11/swrlb#replace"^^\iri(?output, ?input, ?regex, ?replacement) :- replaceBP1(?output, ?input, ?regex, ?replacement)@\prologall .
 
%"http://www.w3.org/2003/11/swrlb#startsWith"^^\iri(?input1, ?input2) :- startsWithBP1(?input1, ?input2)@\prologall .
 
%"http://www.w3.org/2003/11/swrlb#stringConcat"^^\iri(?output, ?input1, ?input2) :- stringConcatBP1(?output, ?input1, ?input2)@\prologall .
 
%"http://www.w3.org/2003/11/swrlb#stringEqualIgnoreCase"^^\iri(?input1, ?input2) :- stringEqualIgnoreCaseBP1(?input1, ?input2)@\prologall .
 
%"http://www.w3.org/2003/11/swrlb#stringLength"^^\iri(?output, ?input) :- stringLengthBP1(?output, ?input)@\prologall .
 
%"http://www.w3.org/2003/11/swrlb#substring"^^\iri(?output, ?input, ?start, ?length) :- substringBP1(?output, ?input, ?start, ?length)@\prologall .
 
%"http://www.w3.org/2003/11/swrlb#substringAfter"^^\iri(?output, ?input, ?start) :- substringAfterBP1(?output, ?input, ?start)@\prologall .
 
%"http://www.w3.org/2003/11/swrlb#substringBefore"^^\iri(?output, ?input, ?end) :- substringBeforeBP1(?output, ?input, ?end)@\prologall .
 
%"http://www.w3.org/2003/11/swrlb#translate"^^\iri(?output, ?input, ?replace, ?replacement) :- translateBP1(?output, ?input, ?replace, ?replacement)@\prologall .
 
%"http://www.w3.org/2003/11/swrlb#upperCase"^^\iri(?output, ?input) :- upperCaseBP1(?output, ?input)@\prologall .


//SILKB
%"http://vulcan.com/2008/silk-builtins#sendEmail"^^\iri(?smtpServer, ?from, ?to, ?subject, ?text) :- sendEmailBP1(?smtpServer, ?from, ?to, ?subject, ?text)@\prologall .
 
%"http://vulcan.com/2008/silk-builtins#writeLn"^^\iri(?input) :- writeLnBP1(?input)@\prologall .
 
%"http://vulcan.com/2008/silk-builtins#querySilkInstance"^^\iri(?outputs, ?outputsBindingOrder, ?inputs, ?url, ?template) :- querySilkInstanceBP1(?outputs, ?outputsBindingOrder, ?inputs, ?url, ?template)@\prologall .
 
%"http://vulcan.com/2008/silk-builtins#fatal"^^\iri(?loggerName, ?message) :- fatalBP1(?loggerName, ?message)@\prologall .
 
%"http://vulcan.com/2008/silk-builtins#error"^^\iri(?loggerName, ?message) :- errorBP1(?loggerName, ?message)@\prologall .
 
%"http://vulcan.com/2008/silk-builtins#warn"^^\iri(?loggerName, ?message) :- warnBP1(?loggerName, ?message)@\prologall .
 
%"http://vulcan.com/2008/silk-builtins#info"^^\iri(?loggerName, ?message) :- infoBP1(?loggerName, ?message)@\prologall .
 
%"http://vulcan.com/2008/silk-builtins#debug"^^\iri(?loggerName, ?message) :- debugBP1(?loggerName, ?message)@\prologall .
 
%"http://vulcan.com/2008/silk-builtins#trace"^^\iri(?loggerName, ?message) :- traceBP1(?loggerName, ?message)@\prologall .
 
%"http://vulcan.com/2008/silk-builtins#cycEvaluate"^^\iri(?output, ?predicate, ?arg1, ?arg2) :- cycEvaluateBP1(?output, ?predicate, ?arg1, ?arg2)@\prologall .
 
%"http://vulcan.com/2008/silk-builtins#cycQuery"^^\iri(?OutputBindings, ?query) :- cycQueryBP1(?OutputBindings, ?query)@\prologall .
 
%"http://vulcan.com/2008/silk-builtins#currentTime"^^\iri(?currentTime) :- currentTimeBP1(?currentTime)@\prologall .
 
%"http://vulcan.com/2008/silk-builtins#returnNResults"^^\iri(?OutputBindings, ?n) :- returnNResultsBP1(?OutputBindings, ?n)@\prologall .



%silkb#isDecimal(?X) :- \double[\isTypeOf(?X)]@\baseType.
   %silkb#isFloat(?X) :- float(?X)@\prolog.
   %silkb#isGround(?X) :- ground(?X).
   %silkb#isInteger(?X) :- integer(?X)@\prolog.
   %silkb#isList(?X) :- is_list(?X)@\prolog.
   %silkb#isSkolem(?X) :- \isskolem(?X).
   %silkb#isString(?X) :- \string[\isTypeOf(?X)]@\baseType.
   %silkb#isSymbol(?X) :- atom(?X)@\prolog.
   %silkb#isURI(?X) :- \iri[\isTypeOf(?X)]@\baseType.
   %silkb#isVariable(?X) :- var(?X)@\prolog.
   %silkb#walltime(?X) :- walltime(?X)@\prolog .
   %silkb#writeLnFlora(?Obj) :- %writeln(?Obj)@\io .
   %silkb#isNumber(?X)  :- number(?X)@\prolog.
   %silkb#isAtom(?X)  :- atom(?X)@\prolog.

%silkb#currentPrologFlag(?Flag, ?Value) :- current_prolog_flag(?Flag, ?Value)@\prolog.
%silkb#sleep(?seconds) :- sleep(?seconds)@\prologall.
%silkb#listMember(?list, ?member) :- %silkb#isList(?list)@builtin and ?list[\member(?member)]@\basetype.
   %silkb#listLength(?list, ?length) :- %silkb#isList(?list)@builtin and ?list[\length->?length]@\basetype.
