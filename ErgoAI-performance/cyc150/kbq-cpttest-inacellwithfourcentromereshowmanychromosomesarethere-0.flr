:- use_argumentation_theory{ogcle} .
?- [ogclpe>>ogcle] .
:- setsemantics{tabling(incremental)}.
?-Method[%mustDefine(on)]@\sys.

\overrides(?X,?Y) :- silk#overrides(?X,?Y) .
\overrides(?X,?Y,?Z,?W) :- silk#overrides(?X,?Y,?Z,?W) .
?- \optimize(class_expressions, main) .


?- [+'../aux_files/silk-predicates'],
   [+'../aux_files/silk-predicates_at_builtin'>>builtin],
	
	[+'core_files/core-pragmatics'],
	[+'core_files/core-rules'],
	[+'core_files/latest-tiny-kb'],
	[+'core_files/rmt-removal-lookup-pos-1'].

//?- ?query : silk#PersistentQuery[query-> ?text].
//?- \tracelow('/tmp/trace.out.biology-kb-v240-v2-with-definitions').
// KBQ:  : $CPTTest-InACellWithFourCentromeresHowManyChromosomesAreThere (query 0)
// http://silk.bbn.com/index.php/Categorized_Candidate_Questions_for_Halo_Bio_Question_Answering : Example:_.28derived_from.29_Barron.27s_Chapter_7_quiz.2C_Question_2

// Implicit Background Facts
istAsserted(UniversalVocabularyMt, isa(temporallySubsumes, ReflexiveBinaryPredicate)).
istAsserted(UniversalVocabularyMt, isa('temporallySubsumes-TypeType', ReflexiveBinaryPredicate)).
istAsserted(UniversalVocabularyMt, isa(genlMt, TransitiveBinaryPredicate)).
istAsserted(UniversalVocabularyMt, isa(genlMt, ReflexiveBinaryPredicate)).
istAsserted(UniversalVocabularyMt, genlMt(MicrobiologicalChemistryMt, MicrobiologyMt)).
istAsserted(UniversalVocabularyMt, genlMt(MicrobiologyMt, MicrobiologyVocabularyMt)).
istAsserted(UniversalVocabularyMt, genlMt(MolecularBiologyMt, MolecularBiologyVocabularyMt)).
istAsserted(UniversalVocabularyMt, genlMt(CycAgencyTheoryMt, UniversalVocabularyMt)).
istAsserted(UniversalVocabularyMt, genlMt(BaseKB, CycAgencyTheoryMt)).
istAsserted(UniversalVocabularyMt, genlMt(MolecularBiologyVocabularyMt, MicrobiologicalChemistryMt)).
istAsserted(UniversalVocabularyMt, genlMt(MicrobiologyVocabularyMt, BiologyVocabularyMt)).
istAsserted(UniversalVocabularyMt, genlMt(ProprietaryMtFn(BiologyMt), BiologyMt)).
istAsserted(UniversalVocabularyMt, genlMt(BiologyVocabularyMt, ProprietaryMtFn(BiologyMt))).
istAsserted(UniversalVocabularyMt, genlMt(ReasoningToCausesFromObservationsMt, BaseKB)).
istAsserted(UniversalVocabularyMt, genlMt(CytologicalProcessesQueryMt, MolecularBiologyMt)).
istAsserted(UniversalVocabularyMt, genlMt(CytologicalProcessesQueryMt, ReasoningToCausesFromObservationsMt)).

// Explicit Background Rules
backwardSentence(cellHasNumberOfChromosomes(?CELL, ?N)) :- mtVisible(BiologyMt), naf backchainForbidden(cellHasNumberOfChromosomes), relationInstanceExistsCount(properPhysicalParts, ?CELL, Centromere, ?N), isa(?CELL, EukaryoticCell).
backwardSentence(not(isa(?CELL, EukaryoticCell))) :- mtVisible(BiologyMt), naf backchainForbidden(isa), relationInstanceExistsCount(properPhysicalParts, ?CELL, Centromere, ?N), not(cellHasNumberOfChromosomes(?CELL, ?N)).
backwardSentence(not(relationInstanceExistsCount(properPhysicalParts, ?CELL, Centromere, ?N))) :- mtVisible(BiologyMt), naf backchainForbidden(relationInstanceExistsCount), isa(?CELL, EukaryoticCell), not(cellHasNumberOfChromosomes(?CELL, ?N)).

// Hypothesized Premises
istAsserted(UniversalVocabularyMt, isa('Hypothesis-HypotheticalContext-259507', HypotheticalContext)).
istAsserted(UniversalVocabularyMt, genlMt('Hypothesis-HypotheticalContext-259507', CytologicalProcessesQueryMt)).
istAsserted(UniversalVocabularyMt, isa('HYP-EukaryoticCell-259508', Individual)).
istAsserted(MtSpace('Hypothesis-HypotheticalContext-259507', MtTimeDimFn(Now)), isa('HYP-EukaryoticCell-259508', EukaryoticCell)).
istAsserted(MtSpace('Hypothesis-HypotheticalContext-259507', MtTimeDimFn(Now)), relationInstanceExistsCount(properPhysicalParts, 'HYP-EukaryoticCell-259508', Centromere, 4)).

// Query
queryMt(MtSpace(MtTimeDimFn(Now), 'Hypothesis-HypotheticalContext-259507')).
//REMOVED TITLE('KBQ  : $CPTTest-InACellWithFourCentromeresHowManyChromosomesAreThere 0').
%pretest :- cellHasNumberOfChromosomes('HYP-EukaryoticCell-259508', 4), %write_results('SUCCESS  : $CPTTest-InACellWithFourCentromeresHowManyChromosomesAreThere 0').

// Debugging
proof(1679, 0) :- isa('HYP-EukaryoticCell-259508', EukaryoticCell).
proof(1679, 1) :- relationInstanceExistsCount(properPhysicalParts, 'HYP-EukaryoticCell-259508', Centromere, 4).
proof(1679, 2) :- isa('HYP-EukaryoticCell-259508', EukaryoticCell), relationInstanceExistsCount(properPhysicalParts, 'HYP-EukaryoticCell-259508', Centromere, 4).
proof(1679, 3) :- cellHasNumberOfChromosomes('HYP-EukaryoticCell-259508', 4).

proof(1679, 1000) :- genlMt(MicrobiologyMt, MicrobiologyVocabularyMt).
proof(1679, 1001) :- genlMt(MolecularBiologyMt, MolecularBiologyVocabularyMt).
proof(1679, 1002) :- genlMt(MolecularBiologyVocabularyMt, MicrobiologicalChemistryMt).
proof(1679, 1003) :- genlMt(MicrobiologyVocabularyMt, BiologyVocabularyMt).
proof(1679, 1004) :- genlMt(ProprietaryMtFn(BiologyMt), BiologyMt).
proof(1679, 1005) :- genlMt(BiologyVocabularyMt, ProprietaryMtFn(BiologyMt)).
proof(1679, 1006) :- genlMt(ReasoningToCausesFromObservationsMt, BaseKB).

proof(1679, 2000) :- admittedArgument('Hypothesis-HypotheticalContext-259507', 1, genlMt).
proof(1679, 2001) :- admittedArgument('Hypothesis-HypotheticalContext-259507', 2, genlMt).
proof(1679, 2002) :- admittedArgument(SecondFn(2, MinuteFn(54, HourFn(17, DayFn(26, MonthFn(April, YearFn(2011)))))), 1, temporallySubsumes).
proof(1679, 2003) :- admittedArgument(SecondFn(2, MinuteFn(54, HourFn(17, DayFn(26, MonthFn(April, YearFn(2011)))))), 2, temporallySubsumes).
proof(1679, 2004) :- genlMt(MtSpace(MtTimeDimFn(Now), 'Hypothesis-HypotheticalContext-259507'), UniversalVocabularyMt).
proof(1679, 2005) :- genlMt(MtSpace(MtTimeDimFn(Now), 'Hypothesis-HypotheticalContext-259507'), BaseKB).
proof(1679, 2006) :- genlMt(MtSpace(MtTimeDimFn(Now), 'Hypothesis-HypotheticalContext-259507'), BiologyMt).
proof(1679, 2007) :- genlMt(MtSpace(MtTimeDimFn(Now), 'Hypothesis-HypotheticalContext-259507'), MtSpace('Hypothesis-HypotheticalContext-259507', MtTimeDimFn(Now))).
proof(1679, 2008) :- isa('HYP-EukaryoticCell-259508', EukaryoticCell). 
checkingGround(?R) :- ground(?R).
%write_results(?R) :- %writeln(?R)@\io.

%pretest :- true.

%test :- tell(temp)@\plg(), 
	Method[%mustDefine(on)]@\sys,
	%pretest,
	Method[%mustDefine(off)]@\sys,
	%pretest,
	told@\plg().

