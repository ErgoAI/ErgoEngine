:- use_argumentation_theory{ogcle} .
?- [ogclpe>>ogcle] .
:- setsemantics{tabling(incremental)}.
?-Method[%mustDefine(on)]@\sys.

\overrides(?X,?Y) :- silk#overrides(?X,?Y) .
\overrides(?X,?Y,?Z,?W) :- silk#overrides(?X,?Y,?Z,?W) .
?- \optimize(class_expressions, main) .


?- [+'../aux_files/silk-predicates'],
   [+'../aux_files/silk-predicates_at_builtin'>>builtin],
	
	[+'core_files/core-pragmatics'],
	[+'core_files/core-rules'],
	[+'core_files/latest-tiny-kb'],
	[+'core_files/rmt-removal-lookup-pos-1'].

//?- ?query : silk#PersistentQuery[query-> ?text].
//?- \tracelow('/tmp/trace.out.biology-kb-v240-v2-with-definitions').
// KBQ:  : $CPTTest-CanParameciaMoveThemselves (query 0)

// Implicit Background Facts
istAsserted(UniversalVocabularyMt, isa(temporallySubsumes, ReflexiveBinaryPredicate)).
istAsserted(UniversalVocabularyMt, isa(genls, TransitiveBinaryPredicate)).
istAsserted(UniversalVocabularyMt, isa('temporallySubsumes-TypeType', ReflexiveBinaryPredicate)).
istAsserted(UniversalVocabularyMt, isa(genlMt, TransitiveBinaryPredicate)).
istAsserted(UniversalVocabularyMt, isa(genlMt, ReflexiveBinaryPredicate)).
istAsserted(UniversalVocabularyMt, genlMt(MicrobiologicalChemistryMt, MicrobiologyMt)).
istAsserted(UniversalVocabularyMt, genlMt(MolecularBiologyMt, MolecularBiologyVocabularyMt)).
istAsserted(UniversalVocabularyMt, genlMt(CycAgencyTheoryMt, UniversalVocabularyMt)).
istAsserted(UniversalVocabularyMt, genlMt(BaseKB, CycAgencyTheoryMt)).
istAsserted(UniversalVocabularyMt, genlMt(MolecularBiologyVocabularyMt, MicrobiologicalChemistryMt)).
istAsserted(BaseKB, transitiveViaArgInverse(TypeCapableFn(behaviorCapable), genls, 1)).
istAsserted(UniversalVocabularyMt, genlMt(ReasoningToCausesFromObservationsMt, BaseKB)).
istAsserted(UniversalVocabularyMt, genlMt(CytologicalProcessesQueryMt, MolecularBiologyMt)).
istAsserted(UniversalVocabularyMt, genlMt(CytologicalProcessesQueryMt, ReasoningToCausesFromObservationsMt)).
istAsserted(MicrobiologyMt, TypeCapableFn(behaviorCapable)('Cell-Motile', LocomotionProcess, providerOfMotiveForce)).
istAsserted(UniversalVocabularyMt, genls('Cell-MotileByCilium', 'Cell-Motile')).
istAsserted(MicrobiologyMt, relationAllExistsMany(properPhysicalParts, Paramecium, Cilium)).

// Implicit Background Rules
forwardSentence(genls(?CELL, 'Cell-MotileByCilium')) :- removalSentence(relationAllExistsMany(properPhysicalParts, ?CELL, Cilium)).

// Explicit Background Rules
backwardSentence(behaviorCapable(?INST, ?EVENT_TYPE, ?ROLE)) :- mtVisible(BaseKB), naf backchainForbidden(behaviorCapable), TypeCapableFn(behaviorCapable)(?COL, ?EVENT_TYPE, ?ROLE), isa(?INST, ?COL).
backwardSentence(not(isa(?INST, ?COL))) :- mtVisible(BaseKB), naf backchainForbidden(isa), TypeCapableFn(behaviorCapable)(?COL, ?EVENT_TYPE, ?ROLE), not(behaviorCapable(?INST, ?EVENT_TYPE, ?ROLE)).
backwardSentence(not(TypeCapableFn(behaviorCapable)(?COL, ?EVENT_TYPE, ?ROLE))) :- mtVisible(BaseKB), naf backchainForbidden(TypeCapableFn(behaviorCapable)), isa(?INST, ?COL), not(behaviorCapable(?INST, ?EVENT_TYPE, ?ROLE)).

// Hypothesized Premises
istAsserted(UniversalVocabularyMt, isa('Hypothesis-HypotheticalContext-259683', HypotheticalContext)).
istAsserted(UniversalVocabularyMt, genlMt('Hypothesis-HypotheticalContext-259683', CytologicalProcessesQueryMt)).
istAsserted(UniversalVocabularyMt, isa('HYP-Paramecium-259684', Individual)).
istAsserted(MtSpace('Hypothesis-HypotheticalContext-259683', MtTimeDimFn(Now)), isa('HYP-Paramecium-259684', Paramecium)).

// Query
queryMt(MtSpace(MtTimeDimFn(Now), 'Hypothesis-HypotheticalContext-259683')).
//REMOVED TITLE('KBQ  : $CPTTest-CanParameciaMoveThemselves 0').
%pretest :- behaviorCapable('HYP-Paramecium-259684', LocomotionProcess, providerOfMotiveForce), %write_results('SUCCESS  : $CPTTest-CanParameciaMoveThemselves 0').

// Debugging
proof(2535, 0) :- isa('HYP-Paramecium-259684', Paramecium).
proof(2535, 1) :- isa('HYP-Paramecium-259684', Paramecium).
proof(2535, 2) :- TypeCapableFn(behaviorCapable)(Paramecium, LocomotionProcess, providerOfMotiveForce).
proof(2535, 3) :- TypeCapableFn(behaviorCapable)(Paramecium, LocomotionProcess, providerOfMotiveForce).
proof(2535, 4) :- isa('HYP-Paramecium-259684', Paramecium), TypeCapableFn(behaviorCapable)(Paramecium, LocomotionProcess, providerOfMotiveForce).
proof(2535, 5) :- behaviorCapable('HYP-Paramecium-259684', LocomotionProcess, providerOfMotiveForce).

proof(2535, 1000) :- genlMt(MolecularBiologyMt, MolecularBiologyVocabularyMt).
proof(2535, 1001) :- genlMt(MolecularBiologyVocabularyMt, MicrobiologicalChemistryMt).
proof(2535, 1002) :- genlMt(ReasoningToCausesFromObservationsMt, BaseKB).
proof(2535, 1003) :- genls(Paramecium, 'Cell-MotileByCilium').

proof(2535, 2000) :- admittedArgument('Hypothesis-HypotheticalContext-259683', 1, genlMt).
proof(2535, 2001) :- admittedArgument('Hypothesis-HypotheticalContext-259683', 2, genlMt).
proof(2535, 2002) :- admittedArgument(SecondFn(57, MinuteFn(9, HourFn(18, DayFn(26, MonthFn(April, YearFn(2011)))))), 1, temporallySubsumes).
proof(2535, 2003) :- admittedArgument(SecondFn(57, MinuteFn(9, HourFn(18, DayFn(26, MonthFn(April, YearFn(2011)))))), 2, temporallySubsumes).
proof(2535, 2004) :- genlMt(MtSpace(MtTimeDimFn(Now), 'Hypothesis-HypotheticalContext-259683'), UniversalVocabularyMt).
proof(2535, 2005) :- genlMt(MtSpace(MtTimeDimFn(Now), 'Hypothesis-HypotheticalContext-259683'), BaseKB).
proof(2535, 2006) :- genlMt(MtSpace(MtTimeDimFn(Now), 'Hypothesis-HypotheticalContext-259683'), MicrobiologyMt).
proof(2535, 2007) :- genlMt(MtSpace(MtTimeDimFn(Now), 'Hypothesis-HypotheticalContext-259683'), MtSpace('Hypothesis-HypotheticalContext-259683', MtTimeDimFn(Now))).
proof(2535, 2008) :- isa('HYP-Paramecium-259684', Paramecium).
proof(2535, 2009) :- TypeCapableFn(behaviorCapable)(Paramecium, LocomotionProcess, providerOfMotiveForce). 
checkingGround(?R) :- ground(?R).
%write_results(?R) :- %writeln(?R)@\io.

%pretest :- true.

%test :- tell(temp)@\plg(), 
	Method[%mustDefine(on)]@\sys,
	%pretest,
	Method[%mustDefine(off)]@\sys,
	%pretest,
	told@\plg().

